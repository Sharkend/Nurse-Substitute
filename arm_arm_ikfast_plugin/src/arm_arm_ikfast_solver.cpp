/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-07-22 08:23:05.716271
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28;
x0=IKsin(j[3]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[0]);
x5=IKcos(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[2]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((1.0)*x7);
x11=((0.01535)*x7);
x12=((0.005)*x1);
x13=((0.1197)*x3);
x14=((0.01535)*x3);
x15=((0.01535)*x5);
x16=((1.0)*x3);
x17=((0.1197)*x7);
x18=((1.0)*x0);
x19=((0.0053)*x3);
x20=((0.0053)*x7);
x21=((1.0)*x5);
x22=((0.005)*x7);
x23=((0.005)*x3);
x24=(x2*x4);
x25=(x4*x6);
x26=(x2*x3);
x27=(x1*x2);
x28=(x1*x6);
IkReal x29=((1.0)*x28);
eetrans[0]=((0.001)+((x19*x27))+(((0.005)*x0*x4))+(((-1.0)*x20*x29))+(((-1.0)*x17*x27))+(((-0.12)*x27))+((x0*((((x14*x27))+(((-1.0)*x11*x29))))))+(((-0.0107)*x4))+(((-1.0)*x13*x29))+((x5*((((x12*x6*x7))+(((-1.0)*x12*x26))))))+((x15*x4)));
IkReal x30=((1.0)*x24);
eetrans[1]=((-0.0002)+(((0.12)*x24))+((x0*x12))+((x1*x15))+((x0*((((x11*x25))+(((-1.0)*x14*x30))))))+((x5*((((x23*x24))+(((-1.0)*x22*x25))))))+((x17*x24))+(((-1.0)*x19*x30))+(((-0.0107)*x1))+((x13*x25))+((x20*x25)));
IkReal x31=((1.0)*x2);
IkReal x32=((1.0)*x6);
eetrans[2]=((0.10675)+((x5*((((x23*x6))+((x2*x22))))))+(((-1.0)*x20*x31))+((x17*x6))+(((0.12)*x6))+(((-1.0)*x19*x32))+((x0*(((((-1.0)*x11*x31))+(((-1.0)*x14*x32))))))+(((-1.0)*x13*x31)));
IkReal x33=((1.0)*x28);
eerot[0]=(((x9*((((x18*x4))+(((-1.0)*x21*((((x1*x26))+(((-1.0)*x10*x33))))))))))+((x8*(((((-1.0)*x10*x27))+(((-1.0)*x16*x33)))))));
eerot[1]=(((x8*((((x16*x25))+((x10*x24))))))+((x9*((((x1*x18))+(((-1.0)*x21*(((((-1.0)*x16*x24))+((x25*x7)))))))))));
eerot[2]=(((x5*x9*((((x16*x6))+((x10*x2))))))+((x8*(((((-1.0)*x16*x2))+((x10*x6)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((-0.001)+px);
new_r01=r01;
new_py=((0.0002)+py);
new_r02=r02;
new_pz=((-0.10675)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[72], zeror[48];
int numroots;;
IkReal x34=((0.0106)*py);
IkReal x35=((0.24)*pz);
IkReal x36=((0.0214)*px);
IkReal x37=((0.0106)*pz);
IkReal x38=((0.0212)*pz);
IkReal x39=((0.48)*py);
IkReal x40=pz*pz;
IkReal x41=py*py;
IkReal x42=px*px;
IkReal x43=((0.00210639087947883)*r01);
IkReal x44=((0.00215470358306189)*r00);
IkReal x45=((0.0001899525)*r02);
IkReal x46=((3.84796416938111e-5)*r00);
IkReal x47=((2.09120521172638e-6)*r02);
IkReal x48=((0.0001179525)*r01);
IkReal x49=((0.000379905)*r01);
IkReal x50=((0.0573380475)*r01);
IkReal x51=((0.00167087296416938)*r02);
IkReal x52=((0.0187537890879479)*r00);
IkReal x53=((0.00298129641693811)*r00);
IkReal x54=((0.000437609120521173)*r01);
IkReal x55=((0.0212)*px);
IkReal x56=((0.0428)*py);
IkReal x57=((0.0424)*px);
IkReal x58=((0.00421278175895766)*r00);
IkReal x59=((0.00430940716612378)*r01);
IkReal x60=((7.69592833876221e-5)*r01);
IkReal x61=((0.000235905)*r00);
IkReal x62=((0.114676095)*r00);
IkReal x63=((0.0375075781758958)*r01);
IkReal x64=((0.00596259283387622)*r01);
IkReal x65=((0.000875218241042345)*r00);
IkReal x66=((3.18e-6)+(((-1.0)*x37)));
IkReal x67=((0.00254082)+(((-1.0)*x37)));
IkReal x68=((0.0212)*py);
IkReal x69=((0.00421278175895766)*r02);
IkReal x70=((4.18241042345277e-6)*r01);
IkReal x71=((0.000235905)*r02);
IkReal x72=((0.114676095)*r02);
IkReal x73=((0.00334174592833876)*r01);
IkReal x74=((0.000875218241042345)*r02);
IkReal x75=(py*r02);
IkReal x76=(py*r00);
IkReal x77=(py*r01);
IkReal x78=((4.0)*px);
IkReal x79=((1.0)*r02);
IkReal x80=(px*r02);
IkReal x81=(pz*r00);
IkReal x82=((1.0)*r01);
IkReal x83=((4.0)*pz);
IkReal x84=((4.0)*r00);
IkReal x85=(pz*r01);
IkReal x86=(px*r00);
IkReal x87=(px*r01);
IkReal x88=(pz*r02);
IkReal x89=((2.0)*px);
IkReal x90=((0.325732899022801)*r00);
IkReal x91=((2.0)*pz);
IkReal x92=((1.0)*x42);
IkReal x93=((1.0)*x41);
IkReal x94=((1.0)*x40);
IkReal x95=((-0.0212)*py);
IkReal x96=((0.0779804560260586)*x76);
IkReal x97=(r02*x34);
IkReal x98=(r02*x36);
IkReal x99=((0.24)*x77);
IkReal x100=((0.0214)*x81);
IkReal x101=((0.0779804560260586)*x87);
IkReal x102=(r02*x35);
IkReal x103=(r01*x37);
IkReal x104=((0.24)*x86);
IkReal x105=((0.0006)*x85);
IkReal x106=((0.000195439739413681)*x81);
IkReal x107=(r01*x36);
IkReal x108=((0.0214)*x76);
IkReal x109=((0.00697068403908795)*x86);
IkReal x110=((0.000195439739413681)*x80);
IkReal x111=((0.0006)*x75);
IkReal x112=((0.00697068403908795)*x88);
IkReal x113=((0.00697068403908795)*x77);
IkReal x114=(r01*x41);
IkReal x115=(r02*x41);
IkReal x116=(r02*x42);
IkReal x117=((0.0428)*x80);
IkReal x118=((0.0428)*x81);
IkReal x119=((0.0428)*x87);
IkReal x120=((0.155960912052117)*x80);
IkReal x121=(r00*x56);
IkReal x122=((0.155960912052117)*x81);
IkReal x123=((0.4794)*x85);
IkReal x124=(r01*x42);
IkReal x125=((0.156156351791531)*x80);
IkReal x126=(r01*x40);
IkReal x127=((0.156156351791531)*x81);
IkReal x128=((0.4794)*x75);
IkReal x129=(r02*x40);
IkReal x130=(x55+(((-1.0)*x56)));
IkReal x131=((-0.96)*px);
IkReal x132=(r02*x56);
IkReal x133=(r00*x38);
IkReal x134=((0.0428)*x85);
IkReal x135=(r02*x55);
IkReal x136=((0.0012)*x80);
IkReal x137=((0.000390879478827362)*x85);
IkReal x138=((0.000390879478827362)*x75);
IkReal x139=((0.0012)*x81);
IkReal x140=((0.0856)*x75);
IkReal x141=((0.0856)*x85);
IkReal x142=((0.9588)*x80);
IkReal x143=((0.312312703583062)*x75);
IkReal x144=((0.9588)*x81);
IkReal x145=((0.312312703583062)*x85);
IkReal x146=((3.18e-6)+x37);
IkReal x147=((0.00254082)+x37);
IkReal x148=((0.000390879478827362)*x87);
IkReal x149=((0.000390879478827362)*x76);
IkReal x150=((0.312312703583062)*x76);
IkReal x151=((0.312312703583062)*x87);
IkReal x152=((4.61325e-5)+x34);
IkReal x153=((4.61325e-5)+x35);
IkReal x154=(r00*x41);
IkReal x155=((2.0)*x40);
IkReal x156=((2.0)*x42);
IkReal x157=(x81*x89);
IkReal x158=(x77*x91);
IkReal x159=(x41*x90);
IkReal x160=(x40*x90);
IkReal x161=(x76*x89);
IkReal x162=(x42*x90);
IkReal x163=((0.651465798045603)*px*x77);
IkReal x164=(x75*x91);
IkReal x165=((0.651465798045603)*pz*x80);
IkReal x166=(x40*x82);
IkReal x167=(x42*x82);
IkReal x168=(x40*x79);
IkReal x169=((2.0)*x115);
IkReal x170=((2.0)*x116);
IkReal x171=(x77*x83);
IkReal x172=((2.0)*x129);
IkReal x173=(x78*x81);
IkReal x174=((2.0)*x126);
IkReal x175=((2.0)*x124);
IkReal x176=(x75*x83);
IkReal x177=((2.0)*x114);
IkReal x178=(x76*x78);
IkReal x179=(x41*x82);
IkReal x180=(x41*x79);
IkReal x181=(x42*x79);
IkReal x182=((((-1.0)*x56))+(((-1.0)*x55)));
IkReal x183=((0.651465798045603)*x124);
IkReal x184=(r00*x156);
IkReal x185=((0.651465798045603)*x126);
IkReal x186=(x78*x88);
IkReal x187=(x77*x78);
IkReal x188=((1.30293159609121)*pz*x75);
IkReal x189=(r00*x155);
IkReal x190=((2.0)*x154);
IkReal x191=((1.30293159609121)*px*x76);
IkReal x192=((0.651465798045603)*x114);
IkReal x193=(x39+x38);
IkReal x194=(x108+x47);
IkReal x195=(x137+x61);
IkReal x196=(x136+x60);
IkReal x197=(x105+x46);
IkReal x198=(x144+x63);
IkReal x199=(x145+x62);
IkReal x200=(x100+x43);
IkReal x201=(x54+x98);
IkReal x202=(x125+x50);
IkReal x203=(x118+x73);
IkReal x204=(x149+x71);
IkReal x205=(x128+x52);
IkReal x206=(x123+x51);
IkReal x207=(x135+x134);
IkReal x208=(x135+x132);
IkReal x209=(x116+x115);
IkReal x210=(x133+x132);
IkReal x211=(x103+x96);
IkReal x212=(x97+x96);
IkReal x213=(x127+x108);
IkReal x214=(x126+x124);
IkReal x215=(x134+x133);
IkReal x216=(x205+x51);
IkReal x217=(x168+x100);
IkReal x218=(x190+x189);
IkReal x219=(x185+x183);
IkReal x220=(x160+x159);
IkReal x221=(x211+x44);
IkReal x222=(x180+x181);
IkReal x223=(x166+x167);
IkReal x224=(x111+x110+x48);
IkReal x225=(x106+x214);
IkReal x226=(x93+x92+x94);
IkReal x227=(x113+x112+x109);
IkReal x228=(x110+x197+x48);
IkReal x229=((((0.311921824104235)*x85))+((x41*x84))+((x40*x84)));
IkReal x230=(x226+x36);
IkReal x231=(x226+x35);
IkReal x232=(x161+x164+x114);
IkReal x233=(x170+x169+x148);
IkReal x234=(x104+x102+x99+x98);
IkReal x235=(x107+x227);
IkReal x236=(x192+x191+x188);
IkReal x237=(x184+x186+x187);
IkReal x238=(x179+x161+x164);
IkReal x239=(x104+x100+x102+x99);
IkReal x240=(x162+x163+x165);
IkReal x241=(x171+x173+x172);
IkReal x242=(x170+x169+x150+x72);
IkReal x243=(x175+x174+x120+x121);
IkReal x244=(x175+x174+x120+x119);
IkReal x245=(x117+x241);
IkReal x246=(x157+x158+x101+x103+x45);
IkReal x247=(x157+x158+x101+x45+x97);
IkReal x248=((((0.311921824104235)*x75))+((x42*x84))+(((0.00075981)*r00))+(((8.0)*px*x77))+(((8.0)*pz*x80)));
IkReal x249=(x220+x232);
IkReal x250=(x178+x177+x176+x122+x121+x49);
IkReal x251=(x178+x177+x176+x122+x119+x49);
op[0]=(x152+(((-1.0)*x230))+x35);
op[1]=x66;
op[2]=((((-1.0)*x38))+x39);
op[3]=x95;
op[4]=((4.61325e-5)+(((-1.0)*x34))+(((-1.0)*x35))+(((-1.0)*x230)));
op[5]=x146;
op[6]=x67;
op[7]=((((-1.0)*x34))+x153+(((-1.0)*x230)));
op[8]=x95;
op[9]=x193;
op[10]=x147;
op[11]=((((-1.0)*x35))+x152+(((-1.0)*x230)));
op[12]=(x129+(((-1.0)*x234))+x200+x247+(((-1.0)*x221))+(((-1.0)*x222)));
op[13]=((((-1.0)*x106))+(((-1.0)*x111))+x194+(((-1.0)*x235))+x228+x249+(((-1.0)*x240))+(((-1.0)*x223)));
op[14]=(x250+(((-1.0)*x244))+(((-1.0)*x69)));
op[15]=((((-1.0)*x118))+x117+(((-1.0)*x204))+x233+x70+(((-1.0)*x241)));
op[16]=((((-1.0)*x168))+(((-1.0)*x44))+(((-1.0)*x104))+(((-1.0)*x102))+(((-1.0)*x200))+x212+x209+x98+(((-1.0)*x99))+(((-1.0)*x246)));
op[17]=((((-1.0)*x194))+x107+x197+(((-1.0)*x238))+x220+x225+(((-1.0)*x240))+(((-1.0)*x227))+(((-1.0)*x224)));
op[18]=((((-1.0)*x107))+x123+(((-1.0)*x202))+x213+x227+x232+x240+(((-1.0)*x216))+(((-1.0)*x223))+(((-1.0)*x220)));
op[19]=(x104+x102+x212+x201+x209+x53+x99+(((-1.0)*x246))+(((-1.0)*x217)));
op[20]=((((-1.0)*x151))+x117+(((-1.0)*x203))+x242+(((-1.0)*x241)));
op[21]=((((-1.0)*x74))+x244+(((-1.0)*x250)));
op[22]=((((-1.0)*x205))+(((-1.0)*x238))+x214+x235+x206+x202+x240+(((-1.0)*x213))+(((-1.0)*x220)));
op[23]=(x129+(((-1.0)*x201))+x239+x247+x53+(((-1.0)*x211))+(((-1.0)*x222)));
op[24]=x182;
op[25]=0;
op[26]=x131;
op[27]=x57;
op[28]=x130;
op[29]=0;
op[30]=0;
op[31]=x130;
op[32]=x57;
op[33]=x131;
op[34]=0;
op[35]=x182;
op[36]=((((-1.0)*x208))+x215+(((-1.0)*x58))+(((-1.0)*x59)));
op[37]=((((-1.0)*x195))+x138+x196+(((-1.0)*x139))+(((-1.0)*x237))+(((-1.0)*x236))+x218+x219);
op[38]=(x229+(((-1.0)*x248)));
op[39]=((((-1.0)*x141))+(((-8.36482084690554e-6)*r00))+x140);
op[40]=((((-1.0)*x207))+x210+x58+(((-1.0)*x59)));
op[41]=(x196+x195+(((-1.0)*x138))+(((-1.0)*x139))+(((-1.0)*x236))+x219+x237+(((-1.0)*x218)));
op[42]=((((-1.0)*x143))+(((-1.0)*x198))+x142+x199+(((-1.0)*x237))+x218+x236+(((-1.0)*x219)));
op[43]=((((-1.0)*x207))+x210+x64+(((-1.0)*x65)));
op[44]=((((-1.0)*x141))+(((0.00668349185667752)*r00))+x140);
op[45]=(x248+(((-1.0)*x229)));
op[46]=((((-1.0)*x198))+(((-1.0)*x199))+x142+x143+x236+x237+(((-1.0)*x219))+(((-1.0)*x218)));
op[47]=((((-1.0)*x208))+x215+x64+x65);
op[48]=((((-1.0)*x34))+x153+x36+(((-1.0)*x226)));
op[49]=x66;
op[50]=((-1.0)*x193);
op[51]=x68;
op[52]=(x152+(((-1.0)*x231))+x36);
op[53]=x146;
op[54]=x67;
op[55]=(x152+x36+x35+(((-1.0)*x226)));
op[56]=x68;
op[57]=((((-1.0)*x39))+x38);
op[58]=x147;
op[59]=((4.61325e-5)+(((-1.0)*x34))+(((-1.0)*x231))+x36);
op[60]=((((-1.0)*x104))+(((-1.0)*x102))+x129+(((-1.0)*x200))+x246+x44+x98+(((-1.0)*x99))+(((-1.0)*x212))+(((-1.0)*x222)));
op[61]=(x111+x194+(((-1.0)*x238))+(((-1.0)*x235))+x225+x240+(((-1.0)*x228))+(((-1.0)*x220)));
op[62]=(x243+(((-1.0)*x69))+(((-1.0)*x251)));
op[63]=((((-1.0)*x70))+x118+(((-1.0)*x204))+x233+(((-1.0)*x245)));
op[64]=((((-1.0)*x168))+(((-1.0)*x234))+x221+x200+x209+(((-1.0)*x247)));
op[65]=((((-1.0)*x106))+(((-1.0)*x194))+(((-1.0)*x197))+x107+x224+x232+x240+(((-1.0)*x223))+(((-1.0)*x220))+(((-1.0)*x227)));
op[66]=((((-1.0)*x107))+(((-1.0)*x127))+x108+(((-1.0)*x206))+(((-1.0)*x238))+x214+x220+x227+x205+x202+(((-1.0)*x240)));
op[67]=((((-1.0)*x168))+(((-1.0)*x201))+x211+x239+x209+(((-1.0)*x247))+(((-1.0)*x53)));
op[68]=((((-1.0)*x151))+x203+x242+(((-1.0)*x245)));
op[69]=((((-1.0)*x74))+x251+(((-1.0)*x243)));
op[70]=((((-1.0)*x108))+(((-1.0)*x123))+x127+(((-1.0)*x202))+x216+x235+x249+(((-1.0)*x240))+(((-1.0)*x223)));
op[71]=((((-1.0)*x100))+x129+x104+x102+x201+x246+x99+(((-1.0)*x212))+(((-1.0)*x53))+(((-1.0)*x222)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj1)||isnan(htj2)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x252=htj0*htj0;
CheckValue<IkReal> x253=IKPowWithIntegerCheck(((1.0)+x252),-1);
if(!x253.valid){
continue;
}
cj0array[numsolutions]=((x253.value)*(((1.0)+(((-1.0)*x252)))));
CheckValue<IkReal> x254=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x254.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x254.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x255=htj1*htj1;
CheckValue<IkReal> x256=IKPowWithIntegerCheck(((1.0)+x255),-1);
if(!x256.valid){
continue;
}
cj1array[numsolutions]=((x256.value)*(((1.0)+(((-1.0)*x255)))));
CheckValue<IkReal> x257=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x257.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x257.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x258=htj2*htj2;
CheckValue<IkReal> x259=IKPowWithIntegerCheck(((1.0)+x258),-1);
if(!x259.valid){
continue;
}
cj2array[numsolutions]=((x259.value)*(((1.0)+(((-1.0)*x258)))));
CheckValue<IkReal> x260=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x260.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x260.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[2];
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=IKsign(sj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x261=((58.8974474575296)*px);
IkReal x262=((19.1848363053842)*py);
IkReal x263=(cj0*cj1);
IkReal x264=((58.8974474575296)*py);
IkReal x265=(pz*sj1);
IkReal x266=(cj1*sj0);
IkReal x267=((19.1848363053842)*px);
if( IKabs(((-0.106878723057296)+((cj0*x267))+((x263*x264))+(((-1.0)*x261*x266))+(((-58.8974474575296)*x265))+((sj0*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.731882320214103)+(((-1.0)*x262*x263))+((x266*x267))+((cj0*x261))+(((19.1848363053842)*x265))+((sj0*x264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.106878723057296)+((cj0*x267))+((x263*x264))+(((-1.0)*x261*x266))+(((-58.8974474575296)*x265))+((sj0*x262))))+IKsqr(((0.731882320214103)+(((-1.0)*x262*x263))+((x266*x267))+((cj0*x261))+(((19.1848363053842)*x265))+((sj0*x264))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.106878723057296)+((cj0*x267))+((x263*x264))+(((-1.0)*x261*x266))+(((-58.8974474575296)*x265))+((sj0*x262))), ((0.731882320214103)+(((-1.0)*x262*x263))+((x266*x267))+((cj0*x261))+(((19.1848363053842)*x265))+((sj0*x264))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x268=IKcos(j3);
IkReal x269=IKsin(j3);
IkReal x270=((1.0)*px);
evalcond[0]=((-0.0107)+(((-1.0)*cj0*x270))+(((-1.0)*py*sj0))+(((0.005)*x269))+(((0.01535)*x268)));
evalcond[1]=((-0.0053)+(((-0.01535)*x269))+(((-1.0)*cj1*sj0*x270))+(((-1.0)*pz*sj1))+((cj0*cj1*py))+(((0.005)*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x271=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*x271)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj0*sj1*x271))+((cj0*r01*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x272=((1.0)*r00);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+(((-1.0)*sj0*sj1*x272))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x272))))+IKsqr((((cj1*r02))+(((-1.0)*sj0*sj1*x272))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x272))), (((cj1*r02))+(((-1.0)*sj0*sj1*x272))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x273=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x273)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj0*sj1*x273))+((cj0*r01*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x274=(cj0*r01);
IkReal x275=(r00*sj0);
if( IKabs((((cj1*x275))+((r02*sj1))+(((-1.0)*cj1*x274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+(((-1.0)*sj1*x275))+((sj1*x274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x275))+((r02*sj1))+(((-1.0)*cj1*x274))))+IKsqr((((cj1*r02))+(((-1.0)*sj1*x275))+((sj1*x274))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x275))+((r02*sj1))+(((-1.0)*cj1*x274))), (((cj1*r02))+(((-1.0)*sj1*x275))+((sj1*x274))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x276=(cj0*r01);
IkReal x277=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*cj1*x277))+((cj1*x276))+(IKsin(j4))+(((-1.0)*r02*sj1)));
evalcond[1]=((((-1.0)*sj1*x277))+((cj1*r02))+(((-1.0)*(IKcos(j4))))+((sj1*x276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x278=(cj0*r01);
IkReal x279=((1.0)*r00*sj0);
if( IKabs(((((-1.0)*cj1*x279))+((cj1*x278))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x279))+((cj1*r02))+((sj1*x278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x279))+((cj1*x278))+(((-1.0)*r02*sj1))))+IKsqr(((((-1.0)*sj1*x279))+((cj1*r02))+((sj1*x278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x279))+((cj1*x278))+(((-1.0)*r02*sj1))), ((((-1.0)*sj1*x279))+((cj1*r02))+((sj1*x278))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x280=(cj0*r01);
IkReal x281=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*sj1*x281))+((cj1*r02))+(((-1.0)*(IKcos(j4))))+((sj1*x280)));
evalcond[1]=((((-1.0)*(IKsin(j4))))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x281))+((cj1*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x282=(cj0*r01);
IkReal x283=(r00*sj0);
CheckValue<IkReal> x284=IKPowWithIntegerCheck(cj3,-1);
if(!x284.valid){
continue;
}
if( IKabs(((x284.value)*((((r02*sj1))+((cj1*x283))+(((-1.0)*cj1*x282)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+(((-1.0)*sj1*x283))+((sj1*x282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x284.value)*((((r02*sj1))+((cj1*x283))+(((-1.0)*cj1*x282))))))+IKsqr((((cj1*r02))+(((-1.0)*sj1*x283))+((sj1*x282))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x284.value)*((((r02*sj1))+((cj1*x283))+(((-1.0)*cj1*x282))))), (((cj1*r02))+(((-1.0)*sj1*x283))+((sj1*x282))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x285=IKsin(j4);
IkReal x286=(cj0*r01);
IkReal x287=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x285))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj1*x287))+((cj1*r02))+(((-1.0)*(IKcos(j4))))+((sj1*x286)));
evalcond[2]=(((cj3*x285))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x287))+((cj1*x286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x288=IKPowWithIntegerCheck(sj3,-1);
if(!x288.valid){
continue;
}
if( IKabs(((x288.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x288.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x288.value)*((((r01*sj0))+((cj0*r00))))), ((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x289=IKsin(j4);
IkReal x290=(cj0*r01);
IkReal x291=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x289))+(((-1.0)*cj0*r00)));
evalcond[1]=(((sj1*x290))+((cj1*r02))+(((-1.0)*sj1*x291))+(((-1.0)*(IKcos(j4)))));
evalcond[2]=((((-1.0)*cj1*x291))+((cj1*x290))+((cj3*x289))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x292=((58.8974474575296)*px);
IkReal x293=((19.1848363053842)*py);
IkReal x294=(cj0*cj1);
IkReal x295=((58.8974474575296)*py);
IkReal x296=(pz*sj1);
IkReal x297=(cj1*sj0);
IkReal x298=((19.1848363053842)*px);
if( IKabs(((-0.106878723057296)+((sj0*x293))+(((58.8974474575296)*x296))+((cj0*x298))+((x292*x297))+(((-1.0)*x294*x295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.731882320214103)+((sj0*x295))+(((-1.0)*x297*x298))+(((-19.1848363053842)*x296))+((x293*x294))+((cj0*x292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.106878723057296)+((sj0*x293))+(((58.8974474575296)*x296))+((cj0*x298))+((x292*x297))+(((-1.0)*x294*x295))))+IKsqr(((0.731882320214103)+((sj0*x295))+(((-1.0)*x297*x298))+(((-19.1848363053842)*x296))+((x293*x294))+((cj0*x292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.106878723057296)+((sj0*x293))+(((58.8974474575296)*x296))+((cj0*x298))+((x292*x297))+(((-1.0)*x294*x295))), ((0.731882320214103)+((sj0*x295))+(((-1.0)*x297*x298))+(((-19.1848363053842)*x296))+((x293*x294))+((cj0*x292))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x299=IKsin(j3);
IkReal x300=IKcos(j3);
IkReal x301=((1.0)*px);
evalcond[0]=((-0.0107)+(((0.01535)*x300))+(((-1.0)*cj0*x301))+(((-1.0)*py*sj0))+(((0.005)*x299)));
evalcond[1]=((0.0053)+(((0.01535)*x299))+(((-0.005)*x300))+(((-1.0)*pz*sj1))+(((-1.0)*cj1*sj0*x301))+((cj0*cj1*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), (((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x302=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*x302))+(IKsin(j4)));
evalcond[1]=((((-1.0)*sj0*sj1*x302))+((cj1*r02))+(IKcos(j4))+((cj0*r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x303=((1.0)*cj0);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*r00*x303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*r01*sj1*x303))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*r00*x303))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*r01*sj1*x303))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*r00*x303))), (((r00*sj0*sj1))+(((-1.0)*r01*sj1*x303))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x304=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x304)));
evalcond[1]=((((-1.0)*sj0*sj1*x304))+((cj1*r02))+(IKcos(j4))+((cj0*r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x305=(r00*sj0);
IkReal x306=((1.0)*cj1);
IkReal x307=(cj0*r01);
IkReal x308=((1.0)*sj1);
if( IKabs((((cj1*x307))+(((-1.0)*r02*x308))+(((-1.0)*x305*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x306))+(((-1.0)*x307*x308))+((sj1*x305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x307))+(((-1.0)*r02*x308))+(((-1.0)*x305*x306))))+IKsqr(((((-1.0)*r02*x306))+(((-1.0)*x307*x308))+((sj1*x305))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x307))+(((-1.0)*r02*x308))+(((-1.0)*x305*x306))), ((((-1.0)*r02*x306))+(((-1.0)*x307*x308))+((sj1*x305))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x309=(cj0*r01);
IkReal x310=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*sj1*x310))+((cj1*r02))+(IKcos(j4))+((sj1*x309)));
evalcond[1]=(((cj1*x309))+(((-1.0)*(IKsin(j4))))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x311=(r00*sj0);
IkReal x312=((1.0)*cj1);
IkReal x313=(cj0*r01);
if( IKabs(((((-1.0)*x312*x313))+((cj1*x311))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x312))+(((-1.0)*sj1*x313))+((sj1*x311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x312*x313))+((cj1*x311))+((r02*sj1))))+IKsqr(((((-1.0)*r02*x312))+(((-1.0)*sj1*x313))+((sj1*x311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x312*x313))+((cj1*x311))+((r02*sj1))), ((((-1.0)*r02*x312))+(((-1.0)*sj1*x313))+((sj1*x311))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x314=(cj0*r01);
IkReal x315=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*sj1*x315))+((cj1*r02))+((sj1*x314))+(IKcos(j4)));
evalcond[1]=(((cj1*x314))+(IKsin(j4))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x316=(r00*sj0);
IkReal x317=((1.0)*cj1);
IkReal x318=(cj0*r01);
IkReal x319=((1.0)*sj1);
CheckValue<IkReal> x320=IKPowWithIntegerCheck(cj3,-1);
if(!x320.valid){
continue;
}
if( IKabs(((x320.value)*(((((-1.0)*r02*x319))+((cj1*x318))+(((-1.0)*x316*x317)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x317))+(((-1.0)*x318*x319))+((sj1*x316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x320.value)*(((((-1.0)*r02*x319))+((cj1*x318))+(((-1.0)*x316*x317))))))+IKsqr(((((-1.0)*r02*x317))+(((-1.0)*x318*x319))+((sj1*x316))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x320.value)*(((((-1.0)*r02*x319))+((cj1*x318))+(((-1.0)*x316*x317))))), ((((-1.0)*r02*x317))+(((-1.0)*x318*x319))+((sj1*x316))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x321=IKsin(j4);
IkReal x322=(cj0*r01);
IkReal x323=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x321))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj1*x323))+((cj1*r02))+(IKcos(j4))+((sj1*x322)));
evalcond[2]=(((cj1*x322))+(((-1.0)*cj1*x323))+(((-1.0)*cj3*x321))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x324=IKPowWithIntegerCheck(sj3,-1);
if(!x324.valid){
continue;
}
if( IKabs(((x324.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x324.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x324.value)*((((r01*sj0))+((cj0*r00))))), (((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x325=IKsin(j4);
IkReal x326=(cj0*r01);
IkReal x327=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x325))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj1*x327))+((cj1*r02))+(IKcos(j4))+((sj1*x326)));
evalcond[2]=(((cj1*x326))+(((-1.0)*cj1*x327))+(((-1.0)*cj3*x325))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x328=((58.8974474575296)*cj0);
IkReal x329=(py*sj1);
IkReal x330=((19.1848363053842)*cj0);
IkReal x331=(py*sj0);
IkReal x332=(cj1*pz);
IkReal x333=(px*sj0*sj1);
if( IKabs(((6.96081497184625)+(((58.8974474575296)*x333))+((px*x330))+(((-58.8974474575296)*x332))+(((-1.0)*x328*x329))+(((19.1848363053842)*x331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.570298036432)+(((58.8974474575296)*x331))+((x329*x330))+(((-19.1848363053842)*x333))+(((19.1848363053842)*x332))+((px*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((6.96081497184625)+(((58.8974474575296)*x333))+((px*x330))+(((-58.8974474575296)*x332))+(((-1.0)*x328*x329))+(((19.1848363053842)*x331))))+IKsqr(((-1.570298036432)+(((58.8974474575296)*x331))+((x329*x330))+(((-19.1848363053842)*x333))+(((19.1848363053842)*x332))+((px*x328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((6.96081497184625)+(((58.8974474575296)*x333))+((px*x330))+(((-58.8974474575296)*x332))+(((-1.0)*x328*x329))+(((19.1848363053842)*x331))), ((-1.570298036432)+(((58.8974474575296)*x331))+((x329*x330))+(((-19.1848363053842)*x333))+(((19.1848363053842)*x332))+((px*x328))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x334=IKsin(j3);
IkReal x335=IKcos(j3);
IkReal x336=((1.0)*px);
evalcond[0]=((-0.0107)+(((-1.0)*cj0*x336))+(((0.005)*x334))+(((-1.0)*py*sj0))+(((0.01535)*x335)));
evalcond[1]=((-0.1147)+(((-1.0)*sj0*sj1*x336))+((cj0*py*sj1))+(((-0.005)*x335))+((cj1*pz))+(((0.01535)*x334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), (((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x337=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*x337))+(IKsin(j4)));
evalcond[1]=(((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*sj0*x337))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x338=((1.0)*r00);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*sj0*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x338))))+IKsqr((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*sj0*x338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x338))), (((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*sj0*x338))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x339=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x339)));
evalcond[1]=(((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*sj0*x339))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x340=(cj0*r01);
IkReal x341=((1.0)*r00*sj0);
if( IKabs((((cj1*r02))+((sj1*x340))+(((-1.0)*sj1*x341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x341))+((cj1*x340))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x340))+(((-1.0)*sj1*x341))))+IKsqr(((((-1.0)*cj1*x341))+((cj1*x340))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x340))+(((-1.0)*sj1*x341))), ((((-1.0)*cj1*x341))+((cj1*x340))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x342=(cj0*r01);
IkReal x343=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*(IKsin(j4))))+((cj1*r02))+((sj1*x342))+(((-1.0)*sj1*x343)));
evalcond[1]=((((-1.0)*cj1*x343))+((cj1*x342))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x344=(r00*sj0);
IkReal x345=((1.0)*cj1);
IkReal x346=(cj0*r01);
IkReal x347=((1.0)*sj1);
if( IKabs(((((-1.0)*r02*x345))+(((-1.0)*x346*x347))+((sj1*x344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x347))+((cj1*x346))+(((-1.0)*x344*x345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x345))+(((-1.0)*x346*x347))+((sj1*x344))))+IKsqr(((((-1.0)*r02*x347))+((cj1*x346))+(((-1.0)*x344*x345))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r02*x345))+(((-1.0)*x346*x347))+((sj1*x344))), ((((-1.0)*r02*x347))+((cj1*x346))+(((-1.0)*x344*x345))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x348=(cj0*r01);
IkReal x349=((1.0)*r00*sj0);
evalcond[0]=(((cj1*r02))+(IKsin(j4))+((sj1*x348))+(((-1.0)*sj1*x349)));
evalcond[1]=((((-1.0)*cj1*x349))+((cj1*x348))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x350=(cj0*r01);
IkReal x351=((1.0)*r00*sj0);
CheckValue<IkReal> x352=IKPowWithIntegerCheck(cj3,-1);
if(!x352.valid){
continue;
}
if( IKabs(((x352.value)*((((cj1*r02))+((sj1*x350))+(((-1.0)*sj1*x351)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x350))+(((-1.0)*cj1*x351))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x352.value)*((((cj1*r02))+((sj1*x350))+(((-1.0)*sj1*x351))))))+IKsqr((((cj1*x350))+(((-1.0)*cj1*x351))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x352.value)*((((cj1*r02))+((sj1*x350))+(((-1.0)*sj1*x351))))), (((cj1*x350))+(((-1.0)*cj1*x351))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x353=IKsin(j4);
IkReal x354=(cj0*r01);
IkReal x355=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x353)));
evalcond[1]=(((cj1*r02))+(((-1.0)*cj3*x353))+((sj1*x354))+(((-1.0)*sj1*x355)));
evalcond[2]=(((cj1*x354))+(((-1.0)*cj1*x355))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x356=IKPowWithIntegerCheck(sj3,-1);
if(!x356.valid){
continue;
}
if( IKabs(((x356.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x356.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x356.value)*((((r01*sj0))+((cj0*r00))))), (((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x357=IKsin(j4);
IkReal x358=(cj0*r01);
IkReal x359=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x357)));
evalcond[1]=(((cj1*r02))+(((-1.0)*cj3*x357))+((sj1*x358))+(((-1.0)*sj1*x359)));
evalcond[2]=(((cj1*x358))+(((-1.0)*cj1*x359))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x360=((58.8974474575296)*cj0);
IkReal x361=(py*sj1);
IkReal x362=((19.1848363053842)*cj0);
IkReal x363=(py*sj0);
IkReal x364=(cj1*pz);
IkReal x365=(px*sj0*sj1);
if( IKabs(((-7.17457241796084)+(((-58.8974474575296)*x365))+(((19.1848363053842)*x363))+((px*x362))+(((58.8974474575296)*x364))+((x360*x361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.03406267686021)+(((-1.0)*x361*x362))+(((19.1848363053842)*x365))+((px*x360))+(((-19.1848363053842)*x364))+(((58.8974474575296)*x363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.17457241796084)+(((-58.8974474575296)*x365))+(((19.1848363053842)*x363))+((px*x362))+(((58.8974474575296)*x364))+((x360*x361))))+IKsqr(((3.03406267686021)+(((-1.0)*x361*x362))+(((19.1848363053842)*x365))+((px*x360))+(((-19.1848363053842)*x364))+(((58.8974474575296)*x363))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-7.17457241796084)+(((-58.8974474575296)*x365))+(((19.1848363053842)*x363))+((px*x362))+(((58.8974474575296)*x364))+((x360*x361))), ((3.03406267686021)+(((-1.0)*x361*x362))+(((19.1848363053842)*x365))+((px*x360))+(((-19.1848363053842)*x364))+(((58.8974474575296)*x363))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x366=IKcos(j3);
IkReal x367=IKsin(j3);
IkReal x368=((1.0)*px);
evalcond[0]=((-0.0107)+(((0.01535)*x366))+(((-1.0)*py*sj0))+(((0.005)*x367))+(((-1.0)*cj0*x368)));
evalcond[1]=((-0.1253)+(((-0.01535)*x367))+((cj0*py*sj1))+(((-1.0)*sj0*sj1*x368))+((cj1*pz))+(((0.005)*x366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x369=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*x369)));
evalcond[1]=(((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*sj0*x369))+(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x370=((1.0)*cj0);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*r00*x370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r01*x370))+((r02*sj1))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*r00*x370))))+IKsqr(((((-1.0)*cj1*r01*x370))+((r02*sj1))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*r00*x370))), ((((-1.0)*cj1*r01*x370))+((r02*sj1))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x371=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x371)));
evalcond[1]=(((cj0*cj1*r01))+(((-1.0)*cj1*sj0*x371))+(((-1.0)*r02*sj1))+(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x372=(r00*sj0);
IkReal x373=((1.0)*cj1);
IkReal x374=(cj0*r01);
if( IKabs((((sj1*x372))+(((-1.0)*r02*x373))+(((-1.0)*sj1*x374)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+((cj1*x372))+(((-1.0)*x373*x374)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x372))+(((-1.0)*r02*x373))+(((-1.0)*sj1*x374))))+IKsqr((((r02*sj1))+((cj1*x372))+(((-1.0)*x373*x374))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x372))+(((-1.0)*r02*x373))+(((-1.0)*sj1*x374))), (((r02*sj1))+((cj1*x372))+(((-1.0)*x373*x374))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x375=(cj0*r01);
IkReal x376=((1.0)*r00*sj0);
evalcond[0]=(((sj1*x375))+((cj1*r02))+(((-1.0)*sj1*x376))+(IKsin(j4)));
evalcond[1]=((((-1.0)*cj1*x376))+(((-1.0)*r02*sj1))+(IKcos(j4))+((cj1*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x377=(cj0*r01);
IkReal x378=(r00*sj0);
if( IKabs((((sj1*x377))+((cj1*r02))+(((-1.0)*sj1*x378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+((cj1*x378))+(((-1.0)*cj1*x377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x377))+((cj1*r02))+(((-1.0)*sj1*x378))))+IKsqr((((r02*sj1))+((cj1*x378))+(((-1.0)*cj1*x377))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x377))+((cj1*r02))+(((-1.0)*sj1*x378))), (((r02*sj1))+((cj1*x378))+(((-1.0)*cj1*x377))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x379=(cj0*r01);
IkReal x380=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*cj1*x380))+(((-1.0)*r02*sj1))+(IKcos(j4))+((cj1*x379)));
evalcond[1]=((((-1.0)*(IKsin(j4))))+((sj1*x379))+((cj1*r02))+(((-1.0)*sj1*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x381=(r00*sj0);
IkReal x382=((1.0)*cj1);
IkReal x383=(cj0*r01);
CheckValue<IkReal> x384=IKPowWithIntegerCheck(cj3,-1);
if(!x384.valid){
continue;
}
if( IKabs(((x384.value)*((((sj1*x381))+(((-1.0)*r02*x382))+(((-1.0)*sj1*x383)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x381))+((r02*sj1))+(((-1.0)*x382*x383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x384.value)*((((sj1*x381))+(((-1.0)*r02*x382))+(((-1.0)*sj1*x383))))))+IKsqr((((cj1*x381))+((r02*sj1))+(((-1.0)*x382*x383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x384.value)*((((sj1*x381))+(((-1.0)*r02*x382))+(((-1.0)*sj1*x383))))), (((cj1*x381))+((r02*sj1))+(((-1.0)*x382*x383))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x385=IKsin(j4);
IkReal x386=(cj0*r01);
IkReal x387=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x385)));
evalcond[1]=((((-1.0)*cj1*x387))+((cj1*x386))+(((-1.0)*r02*sj1))+(IKcos(j4)));
evalcond[2]=(((cj3*x385))+((cj1*r02))+((sj1*x386))+(((-1.0)*sj1*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x388=IKPowWithIntegerCheck(sj3,-1);
if(!x388.valid){
continue;
}
if( IKabs(((x388.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x388.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x388.value)*((((r01*sj0))+((cj0*r00))))), ((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x389=IKsin(j4);
IkReal x390=(cj0*r01);
IkReal x391=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x389)));
evalcond[1]=((((-1.0)*cj1*x391))+(((-1.0)*r02*sj1))+(IKcos(j4))+((cj1*x390)));
evalcond[2]=(((cj3*x389))+(((-1.0)*sj1*x391))+((sj1*x390))+((cj1*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x392=((6140000.0)*sj1);
IkReal x393=(cj0*py);
IkReal x394=(px*sj0);
IkReal x395=(cj1*pz);
IkReal x396=((2000000.0)*sj1);
IkReal x397=((2000000.0)*sj2);
IkReal x398=(py*sj0);
IkReal x399=(cj0*px);
IkReal x400=((6140000.0)*sj2);
CheckValue<IkReal> x401=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x401.valid){
continue;
}
CheckValue<IkReal> x402 = IKatan2WithCheck(IkReal(((736800.0)+(((-11142.0)*sj2))+(((-6140000.0)*x395))+((x397*x398))+((x397*x399))+(((734958.0)*cj2))+(((-1.0)*x392*x393))+((x392*x394)))),IkReal(((-240000.0)+(((2000000.0)*x395))+(((-1.0)*x394*x396))+(((-239400.0)*cj2))+((x399*x400))+(((76298.0)*sj2))+((x398*x400))+((x393*x396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x401.value)))+(x402.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x403=IKsin(j3);
IkReal x404=IKcos(j3);
IkReal x405=(cj0*py);
IkReal x406=((0.005)*x404);
IkReal x407=((1.0)*px*sj0);
IkReal x408=((0.01535)*x403);
evalcond[0]=((-0.0107)+(((0.01535)*x404))+(((-1.0)*py*sj0))+(((0.005)*x403))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.12)+(((0.0053)*sj2))+((sj1*x405))+((sj2*x408))+((cj1*pz))+(((-0.1197)*cj2))+(((-1.0)*sj2*x406))+(((-1.0)*sj1*x407)));
evalcond[2]=((((-1.0)*cj1*x407))+(((-1.0)*cj2*x408))+(((-0.0053)*cj2))+(((-1.0)*pz*sj1))+((cj1*x405))+((cj2*x406))+(((-0.1197)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x409=((1.0)*sj2);
IkReal x410=(r02*sj1);
IkReal x411=(r00*sj0);
IkReal x412=((1.0)*cj2);
IkReal x413=(cj1*cj2);
IkReal x414=(cj0*r01*sj1);
IkReal x415=(cj0*cj1*r01);
if( IKabs(((((-1.0)*x412*x415))+((x411*x413))+((sj2*x414))+(((-1.0)*sj1*x409*x411))+((cj2*x410))+((cj1*r02*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x415))+(((-1.0)*cj1*x409*x411))+((cj2*x414))+((r02*x413))+(((-1.0)*sj1*x411*x412))+(((-1.0)*x409*x410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x412*x415))+((x411*x413))+((sj2*x414))+(((-1.0)*sj1*x409*x411))+((cj2*x410))+((cj1*r02*sj2))))+IKsqr((((sj2*x415))+(((-1.0)*cj1*x409*x411))+((cj2*x414))+((r02*x413))+(((-1.0)*sj1*x411*x412))+(((-1.0)*x409*x410))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x412*x415))+((x411*x413))+((sj2*x414))+(((-1.0)*sj1*x409*x411))+((cj2*x410))+((cj1*r02*sj2))), (((sj2*x415))+(((-1.0)*cj1*x409*x411))+((cj2*x414))+((r02*x413))+(((-1.0)*sj1*x411*x412))+(((-1.0)*x409*x410))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x416=IKsin(j4);
IkReal x417=IKcos(j4);
IkReal x418=((1.0)*sj2);
IkReal x419=(cj0*r01);
IkReal x420=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*sj1*x420))+((sj1*x419))+((cj1*r02))+(((-1.0)*cj2*x417))+(((-1.0)*x416*x418)));
evalcond[1]=((((-1.0)*x417*x418))+(((-1.0)*cj1*x420))+(((-1.0)*r02*sj1))+((cj2*x416))+((cj1*x419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x421=((1.0)*sj2);
IkReal x422=(r02*sj1);
IkReal x423=((1.0)*cj2);
IkReal x424=(cj1*r02);
IkReal x425=(cj0*r01*sj1);
IkReal x426=(cj1*r00*sj0);
IkReal x427=(r00*sj0*sj1);
IkReal x428=(cj0*cj1*r01);
if( IKabs(((((-1.0)*x422*x423))+(((-1.0)*x421*x424))+(((-1.0)*x421*x425))+((cj2*x428))+(((-1.0)*x423*x426))+((sj2*x427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x421*x426))+(((-1.0)*x421*x422))+((cj2*x425))+((cj2*x424))+(((-1.0)*x423*x427))+((sj2*x428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x422*x423))+(((-1.0)*x421*x424))+(((-1.0)*x421*x425))+((cj2*x428))+(((-1.0)*x423*x426))+((sj2*x427))))+IKsqr(((((-1.0)*x421*x426))+(((-1.0)*x421*x422))+((cj2*x425))+((cj2*x424))+(((-1.0)*x423*x427))+((sj2*x428))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x422*x423))+(((-1.0)*x421*x424))+(((-1.0)*x421*x425))+((cj2*x428))+(((-1.0)*x423*x426))+((sj2*x427))), ((((-1.0)*x421*x426))+(((-1.0)*x421*x422))+((cj2*x425))+((cj2*x424))+(((-1.0)*x423*x427))+((sj2*x428))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x429=IKsin(j4);
IkReal x430=IKcos(j4);
IkReal x431=(cj0*r01);
IkReal x432=((1.0)*cj2);
IkReal x433=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*x430*x432))+(((-1.0)*sj1*x433))+((cj1*r02))+((sj2*x429))+((sj1*x431)));
evalcond[1]=(((cj1*x431))+(((-1.0)*cj1*x433))+(((-1.0)*x429*x432))+(((-1.0)*r02*sj1))+(((-1.0)*sj2*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), (((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x434=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*x434)));
evalcond[1]=((((-1.0)*cj1*sj0*x434))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x435=((1.0)*r00);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*sj0*x435))+((cj0*cj1*r01))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x435))))+IKsqr(((((-1.0)*cj1*sj0*x435))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x435))), ((((-1.0)*cj1*sj0*x435))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x436=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x436)));
evalcond[1]=((((-1.0)*cj1*sj0*x436))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x437=(cj0*r01);
IkReal x438=((1.0)*r00*sj0);
if( IKabs(((((-1.0)*sj1*x438))+((cj1*r02))+((sj1*x437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x437))+(((-1.0)*cj1*x438))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x438))+((cj1*r02))+((sj1*x437))))+IKsqr((((cj1*x437))+(((-1.0)*cj1*x438))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj1*x438))+((cj1*r02))+((sj1*x437))), (((cj1*x437))+(((-1.0)*cj1*x438))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x439=(cj0*r01);
IkReal x440=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*(IKsin(j4))))+((cj1*r02))+(((-1.0)*sj1*x440))+((sj1*x439)));
evalcond[1]=(((cj1*x439))+(((-1.0)*cj1*x440))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x441=(r00*sj0);
IkReal x442=((1.0)*cj1);
IkReal x443=(cj0*r01);
IkReal x444=((1.0)*sj1);
if( IKabs((((sj1*x441))+(((-1.0)*x443*x444))+(((-1.0)*r02*x442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x443))+(((-1.0)*r02*x444))+(((-1.0)*x441*x442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x441))+(((-1.0)*x443*x444))+(((-1.0)*r02*x442))))+IKsqr((((cj1*x443))+(((-1.0)*r02*x444))+(((-1.0)*x441*x442))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x441))+(((-1.0)*x443*x444))+(((-1.0)*r02*x442))), (((cj1*x443))+(((-1.0)*r02*x444))+(((-1.0)*x441*x442))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x445=(cj0*r01);
IkReal x446=((1.0)*r00*sj0);
evalcond[0]=(((sj1*x445))+((cj1*r02))+(IKsin(j4))+(((-1.0)*sj1*x446)));
evalcond[1]=(((cj1*x445))+(((-1.0)*cj1*x446))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x447=(cj0*r01);
IkReal x448=((1.0)*r00*sj0);
CheckValue<IkReal> x449=IKPowWithIntegerCheck(cj3,-1);
if(!x449.valid){
continue;
}
if( IKabs(((x449.value)*((((sj1*x447))+((cj1*r02))+(((-1.0)*sj1*x448)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x447))+(((-1.0)*cj1*x448))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x449.value)*((((sj1*x447))+((cj1*r02))+(((-1.0)*sj1*x448))))))+IKsqr((((cj1*x447))+(((-1.0)*cj1*x448))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x449.value)*((((sj1*x447))+((cj1*r02))+(((-1.0)*sj1*x448))))), (((cj1*x447))+(((-1.0)*cj1*x448))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x450=IKsin(j4);
IkReal x451=(cj0*r01);
IkReal x452=((1.0)*r00*sj0);
evalcond[0]=(((sj3*x450))+(((-1.0)*r01*sj0))+(((-1.0)*cj0*r00)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj1*x452))+((sj1*x451))+(((-1.0)*cj3*x450)));
evalcond[2]=(((cj1*x451))+(((-1.0)*cj1*x452))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x453=IKPowWithIntegerCheck(sj3,-1);
if(!x453.valid){
continue;
}
if( IKabs(((x453.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x453.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x453.value)*((((r01*sj0))+((cj0*r00))))), (((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x454=IKsin(j4);
IkReal x455=(cj0*r01);
IkReal x456=((1.0)*r00*sj0);
evalcond[0]=(((sj3*x454))+(((-1.0)*r01*sj0))+(((-1.0)*cj0*r00)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj1*x456))+((sj1*x455))+(((-1.0)*cj3*x454)));
evalcond[2]=(((cj1*x455))+(((-1.0)*cj1*x456))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x457=((1.0)*r00);
evalcond[0]=((((-1.0)*cj0*x457))+(((-1.0)*r01*sj0))+(IKsin(j4)));
evalcond[1]=(((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(IKcos(j4))+(((-1.0)*cj1*sj0*x457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x458=((1.0)*cj0);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*r00*x458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r01*x458))+((r02*sj1))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*r00*x458))))+IKsqr(((((-1.0)*cj1*r01*x458))+((r02*sj1))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*r00*x458))), ((((-1.0)*cj1*r01*x458))+((r02*sj1))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x459=((1.0)*r00);
evalcond[0]=((((-1.0)*cj0*x459))+(((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4)))));
evalcond[1]=(((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(IKcos(j4))+(((-1.0)*cj1*sj0*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x460=(r00*sj0);
IkReal x461=((1.0)*cj1);
IkReal x462=(cj0*r01);
if( IKabs((((sj1*x460))+(((-1.0)*r02*x461))+(((-1.0)*sj1*x462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x460))+((r02*sj1))+(((-1.0)*x461*x462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x460))+(((-1.0)*r02*x461))+(((-1.0)*sj1*x462))))+IKsqr((((cj1*x460))+((r02*sj1))+(((-1.0)*x461*x462))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x460))+(((-1.0)*r02*x461))+(((-1.0)*sj1*x462))), (((cj1*x460))+((r02*sj1))+(((-1.0)*x461*x462))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x463=(cj0*r01);
IkReal x464=((1.0)*r00*sj0);
evalcond[0]=(((cj1*r02))+(((-1.0)*sj1*x464))+(IKsin(j4))+((sj1*x463)));
evalcond[1]=(((cj1*x463))+(((-1.0)*r02*sj1))+(IKcos(j4))+(((-1.0)*cj1*x464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x465=(cj0*r01);
IkReal x466=(r00*sj0);
if( IKabs((((cj1*r02))+((sj1*x465))+(((-1.0)*sj1*x466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x465))+((cj1*x466))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x465))+(((-1.0)*sj1*x466))))+IKsqr(((((-1.0)*cj1*x465))+((cj1*x466))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x465))+(((-1.0)*sj1*x466))), ((((-1.0)*cj1*x465))+((cj1*x466))+((r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x467=(cj0*r01);
IkReal x468=((1.0)*r00*sj0);
evalcond[0]=(((cj1*x467))+(((-1.0)*r02*sj1))+(IKcos(j4))+(((-1.0)*cj1*x468)));
evalcond[1]=((((-1.0)*(IKsin(j4))))+((cj1*r02))+(((-1.0)*sj1*x468))+((sj1*x467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x469=(r00*sj0);
IkReal x470=((1.0)*cj1);
IkReal x471=(cj0*r01);
CheckValue<IkReal> x472=IKPowWithIntegerCheck(cj3,-1);
if(!x472.valid){
continue;
}
if( IKabs(((x472.value)*((((sj1*x469))+(((-1.0)*sj1*x471))+(((-1.0)*r02*x470)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x469))+((r02*sj1))+(((-1.0)*x470*x471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x472.value)*((((sj1*x469))+(((-1.0)*sj1*x471))+(((-1.0)*r02*x470))))))+IKsqr((((cj1*x469))+((r02*sj1))+(((-1.0)*x470*x471))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x472.value)*((((sj1*x469))+(((-1.0)*sj1*x471))+(((-1.0)*r02*x470))))), (((cj1*x469))+((r02*sj1))+(((-1.0)*x470*x471))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x473=IKsin(j4);
IkReal x474=(cj0*r01);
IkReal x475=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x473)));
evalcond[1]=(((cj1*x474))+(((-1.0)*r02*sj1))+(IKcos(j4))+(((-1.0)*cj1*x475)));
evalcond[2]=((((-1.0)*sj1*x475))+((cj3*x473))+((cj1*r02))+((sj1*x474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x476=IKPowWithIntegerCheck(sj3,-1);
if(!x476.valid){
continue;
}
if( IKabs(((x476.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x476.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x476.value)*((((r01*sj0))+((cj0*r00))))), ((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x477=IKsin(j4);
IkReal x478=(cj0*r01);
IkReal x479=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x477)));
evalcond[1]=(((cj1*x478))+(((-1.0)*r02*sj1))+(IKcos(j4))+(((-1.0)*cj1*x479)));
evalcond[2]=((((-1.0)*sj1*x479))+((cj3*x477))+((cj1*r02))+((sj1*x478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x480=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*x480)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj0*sj1*x480))+((cj0*r01*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x481=((1.0)*r00);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+(((-1.0)*sj0*sj1*x481))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x481))))+IKsqr((((cj1*r02))+(((-1.0)*sj0*sj1*x481))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x481))), (((cj1*r02))+(((-1.0)*sj0*sj1*x481))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x482=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x482)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj0*sj1*x482))+((cj0*r01*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x483=(cj0*r01);
IkReal x484=(r00*sj0);
if( IKabs(((((-1.0)*cj1*x483))+((r02*sj1))+((cj1*x484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((sj1*x483))+(((-1.0)*sj1*x484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x483))+((r02*sj1))+((cj1*x484))))+IKsqr((((cj1*r02))+((sj1*x483))+(((-1.0)*sj1*x484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x483))+((r02*sj1))+((cj1*x484))), (((cj1*r02))+((sj1*x483))+(((-1.0)*sj1*x484))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x485=(cj0*r01);
IkReal x486=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*cj1*x486))+(IKsin(j4))+(((-1.0)*r02*sj1))+((cj1*x485)));
evalcond[1]=((((-1.0)*sj1*x486))+((cj1*r02))+((sj1*x485))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x487=(cj0*r01);
IkReal x488=((1.0)*r00*sj0);
if( IKabs(((((-1.0)*cj1*x488))+(((-1.0)*r02*sj1))+((cj1*x487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x488))+((cj1*r02))+((sj1*x487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x488))+(((-1.0)*r02*sj1))+((cj1*x487))))+IKsqr(((((-1.0)*sj1*x488))+((cj1*r02))+((sj1*x487))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x488))+(((-1.0)*r02*sj1))+((cj1*x487))), ((((-1.0)*sj1*x488))+((cj1*r02))+((sj1*x487))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x489=(cj0*r01);
IkReal x490=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*sj1*x490))+((cj1*r02))+((sj1*x489))+(((-1.0)*(IKcos(j4)))));
evalcond[1]=((((-1.0)*cj1*x490))+(((-1.0)*(IKsin(j4))))+(((-1.0)*r02*sj1))+((cj1*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x491=(cj0*r01);
IkReal x492=(r00*sj0);
CheckValue<IkReal> x493=IKPowWithIntegerCheck(cj3,-1);
if(!x493.valid){
continue;
}
if( IKabs(((x493.value)*((((r02*sj1))+((cj1*x492))+(((-1.0)*cj1*x491)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((sj1*x491))+(((-1.0)*sj1*x492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x493.value)*((((r02*sj1))+((cj1*x492))+(((-1.0)*cj1*x491))))))+IKsqr((((cj1*r02))+((sj1*x491))+(((-1.0)*sj1*x492))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x493.value)*((((r02*sj1))+((cj1*x492))+(((-1.0)*cj1*x491))))), (((cj1*r02))+((sj1*x491))+(((-1.0)*sj1*x492))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x494=IKsin(j4);
IkReal x495=(cj0*r01);
IkReal x496=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x494)));
evalcond[1]=((((-1.0)*sj1*x496))+((cj1*r02))+((sj1*x495))+(((-1.0)*(IKcos(j4)))));
evalcond[2]=((((-1.0)*cj1*x496))+(((-1.0)*r02*sj1))+((cj1*x495))+((cj3*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x497=IKPowWithIntegerCheck(sj3,-1);
if(!x497.valid){
continue;
}
if( IKabs(((x497.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x497.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x497.value)*((((r01*sj0))+((cj0*r00))))), ((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x498=IKsin(j4);
IkReal x499=(cj0*r01);
IkReal x500=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x498)));
evalcond[1]=((((-1.0)*sj1*x500))+((cj1*r02))+((sj1*x499))+(((-1.0)*(IKcos(j4)))));
evalcond[2]=((((-1.0)*r02*sj1))+((cj1*x499))+((cj3*x498))+(((-1.0)*cj1*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), (((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x501=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*x501))+(IKsin(j4)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj0*sj1*x501))+(IKcos(j4))+((cj0*r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x502=((1.0)*cj0);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*r00*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*r01*sj1*x502))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*r00*x502))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*r01*sj1*x502))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*r00*x502))), (((r00*sj0*sj1))+(((-1.0)*r01*sj1*x502))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x503=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x503)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj0*sj1*x503))+(IKcos(j4))+((cj0*r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x504=(r00*sj0);
IkReal x505=((1.0)*cj1);
IkReal x506=(cj0*r01);
IkReal x507=((1.0)*sj1);
if( IKabs((((cj1*x506))+(((-1.0)*x504*x505))+(((-1.0)*r02*x507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x506*x507))+((sj1*x504))+(((-1.0)*r02*x505)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x506))+(((-1.0)*x504*x505))+(((-1.0)*r02*x507))))+IKsqr(((((-1.0)*x506*x507))+((sj1*x504))+(((-1.0)*r02*x505))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x506))+(((-1.0)*x504*x505))+(((-1.0)*r02*x507))), ((((-1.0)*x506*x507))+((sj1*x504))+(((-1.0)*r02*x505))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x508=(cj0*r01);
IkReal x509=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*sj1*x509))+((sj1*x508))+((cj1*r02))+(IKcos(j4)));
evalcond[1]=(((cj1*x508))+(((-1.0)*(IKsin(j4))))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x510=(r00*sj0);
IkReal x511=((1.0)*cj1);
IkReal x512=(cj0*r01);
if( IKabs(((((-1.0)*x511*x512))+((r02*sj1))+((cj1*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x511))+((sj1*x510))+(((-1.0)*sj1*x512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x511*x512))+((r02*sj1))+((cj1*x510))))+IKsqr(((((-1.0)*r02*x511))+((sj1*x510))+(((-1.0)*sj1*x512))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x511*x512))+((r02*sj1))+((cj1*x510))), ((((-1.0)*r02*x511))+((sj1*x510))+(((-1.0)*sj1*x512))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x513=(cj0*r01);
IkReal x514=((1.0)*r00*sj0);
evalcond[0]=(((cj1*r02))+(((-1.0)*sj1*x514))+(IKcos(j4))+((sj1*x513)));
evalcond[1]=((((-1.0)*cj1*x514))+(IKsin(j4))+(((-1.0)*r02*sj1))+((cj1*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x515=(r00*sj0);
IkReal x516=((1.0)*cj1);
IkReal x517=(cj0*r01);
IkReal x518=((1.0)*sj1);
CheckValue<IkReal> x519=IKPowWithIntegerCheck(cj3,-1);
if(!x519.valid){
continue;
}
if( IKabs(((x519.value)*(((((-1.0)*x515*x516))+((cj1*x517))+(((-1.0)*r02*x518)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x517*x518))+(((-1.0)*r02*x516))+((sj1*x515)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x519.value)*(((((-1.0)*x515*x516))+((cj1*x517))+(((-1.0)*r02*x518))))))+IKsqr(((((-1.0)*x517*x518))+(((-1.0)*r02*x516))+((sj1*x515))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x519.value)*(((((-1.0)*x515*x516))+((cj1*x517))+(((-1.0)*r02*x518))))), ((((-1.0)*x517*x518))+(((-1.0)*r02*x516))+((sj1*x515))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x520=IKsin(j4);
IkReal x521=(cj0*r01);
IkReal x522=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x520))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj1*x522))+((sj1*x521))+((cj1*r02))+(IKcos(j4)));
evalcond[2]=((((-1.0)*cj1*x522))+(((-1.0)*cj3*x520))+(((-1.0)*r02*sj1))+((cj1*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x523=IKPowWithIntegerCheck(sj3,-1);
if(!x523.valid){
continue;
}
if( IKabs(((x523.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x523.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x523.value)*((((r01*sj0))+((cj0*r00))))), (((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x524=IKsin(j4);
IkReal x525=(cj0*r01);
IkReal x526=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x524))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj1*x526))+((sj1*x525))+((cj1*r02))+(IKcos(j4)));
evalcond[2]=((((-1.0)*cj1*x526))+(((-1.0)*cj3*x524))+(((-1.0)*r02*sj1))+((cj1*x525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x527=IKPowWithIntegerCheck(sj2,-1);
if(!x527.valid){
continue;
}
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x527.value)*((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((x527.value)*((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((x527.value)*((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x528=IKcos(j4);
IkReal x529=(cj0*r01);
IkReal x530=((1.0)*x528);
IkReal x531=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*cj2*x530))+(((-1.0)*sj1*x531))+((sj1*x529))+((cj1*r02)));
evalcond[2]=((((-1.0)*sj2*x530))+(((-1.0)*cj1*x531))+(((-1.0)*r02*sj1))+((cj1*x529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x532=IKPowWithIntegerCheck(cj2,-1);
if(!x532.valid){
continue;
}
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x532.value)*(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((x532.value)*(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((x532.value)*(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x533=IKcos(j4);
IkReal x534=(cj0*r01);
IkReal x535=((1.0)*x533);
IkReal x536=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*cj2*x535))+(((-1.0)*sj1*x536))+((sj1*x534))+((cj1*r02)));
evalcond[2]=((((-1.0)*sj2*x535))+(((-1.0)*cj1*x536))+(((-1.0)*r02*sj1))+((cj1*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x537=((1.0)*r00);
CheckValue<IkReal> x538=IKPowWithIntegerCheck(sj2,-1);
if(!x538.valid){
continue;
}
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x538.value)*(((((-1.0)*cj1*sj0*x537))+((cj0*cj1*r01))+(((-1.0)*r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x537))))+IKsqr(((x538.value)*(((((-1.0)*cj1*sj0*x537))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x537))), ((x538.value)*(((((-1.0)*cj1*sj0*x537))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x539=IKcos(j4);
IkReal x540=(cj0*r01);
IkReal x541=((1.0)*x539);
IkReal x542=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*r00)));
evalcond[1]=(((sj1*x540))+(((-1.0)*sj1*x542))+(((-1.0)*cj2*x541))+((cj1*r02)));
evalcond[2]=((((-1.0)*sj2*x541))+(((-1.0)*cj1*x542))+((cj1*x540))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x543=((1.0)*r00);
CheckValue<IkReal> x544=IKPowWithIntegerCheck(cj2,-1);
if(!x544.valid){
continue;
}
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x544.value)*((((cj1*r02))+((cj0*r01*sj1))+(((-1.0)*sj0*sj1*x543)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x543))))+IKsqr(((x544.value)*((((cj1*r02))+((cj0*r01*sj1))+(((-1.0)*sj0*sj1*x543))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x543))), ((x544.value)*((((cj1*r02))+((cj0*r01*sj1))+(((-1.0)*sj0*sj1*x543))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x545=IKcos(j4);
IkReal x546=(cj0*r01);
IkReal x547=((1.0)*x545);
IkReal x548=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*r00)));
evalcond[1]=(((sj1*x546))+(((-1.0)*sj1*x548))+(((-1.0)*cj2*x547))+((cj1*r02)));
evalcond[2]=((((-1.0)*sj2*x547))+(((-1.0)*cj1*x548))+((cj1*x546))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x554=IKPowWithIntegerCheck(sj3,-1);
if(!x554.valid){
continue;
}
IkReal x549=x554.value;
IkReal x550=(cj0*r00);
IkReal x551=(sj1*sj3);
IkReal x552=(r01*sj0);
IkReal x553=((1.0)*cj3*sj2);
CheckValue<IkReal> x555=IKPowWithIntegerCheck(cj2,-1);
if(!x555.valid){
continue;
}
if( IKabs((x549*((x552+x550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x549*(x555.value)*(((((-1.0)*r00*sj0*x551))+(((-1.0)*x550*x553))+(((-1.0)*x552*x553))+((cj0*r01*x551))+((cj1*r02*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x549*((x552+x550))))+IKsqr((x549*(x555.value)*(((((-1.0)*r00*sj0*x551))+(((-1.0)*x550*x553))+(((-1.0)*x552*x553))+((cj0*r01*x551))+((cj1*r02*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x549*((x552+x550))), (x549*(x555.value)*(((((-1.0)*r00*sj0*x551))+(((-1.0)*x550*x553))+(((-1.0)*x552*x553))+((cj0*r01*x551))+((cj1*r02*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x556=IKsin(j4);
IkReal x557=IKcos(j4);
IkReal x558=(cj0*r01);
IkReal x559=((1.0)*x557);
IkReal x560=((1.0)*r00*sj0);
IkReal x561=(cj3*x556);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x556)));
evalcond[1]=(((sj1*x558))+((cj1*r02))+(((-1.0)*cj2*x559))+(((-1.0)*sj1*x560))+(((-1.0)*sj2*x561)));
evalcond[2]=(((cj2*x561))+(((-1.0)*sj2*x559))+((cj1*x558))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x567=IKPowWithIntegerCheck(sj3,-1);
if(!x567.valid){
continue;
}
IkReal x562=x567.value;
IkReal x563=(cj0*r00);
IkReal x564=((1.0)*sj3);
IkReal x565=(r01*sj0);
IkReal x566=(cj2*cj3);
CheckValue<IkReal> x568=IKPowWithIntegerCheck(sj2,-1);
if(!x568.valid){
continue;
}
if( IKabs((x562*((x565+x563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x562*(x568.value)*(((((-1.0)*r02*sj1*x564))+((x565*x566))+((x563*x566))+((cj0*cj1*r01*sj3))+(((-1.0)*cj1*r00*sj0*x564)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x562*((x565+x563))))+IKsqr((x562*(x568.value)*(((((-1.0)*r02*sj1*x564))+((x565*x566))+((x563*x566))+((cj0*cj1*r01*sj3))+(((-1.0)*cj1*r00*sj0*x564))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x562*((x565+x563))), (x562*(x568.value)*(((((-1.0)*r02*sj1*x564))+((x565*x566))+((x563*x566))+((cj0*cj1*r01*sj3))+(((-1.0)*cj1*r00*sj0*x564))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x569=IKsin(j4);
IkReal x570=IKcos(j4);
IkReal x571=(cj0*r01);
IkReal x572=((1.0)*x570);
IkReal x573=((1.0)*r00*sj0);
IkReal x574=(cj3*x569);
evalcond[0]=(((sj3*x569))+(((-1.0)*r01*sj0))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj2*x574))+((sj1*x571))+(((-1.0)*cj2*x572))+(((-1.0)*sj1*x573))+((cj1*r02)));
evalcond[2]=((((-1.0)*sj2*x572))+(((-1.0)*cj1*x573))+((cj2*x574))+(((-1.0)*r02*sj1))+((cj1*x571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x575=((1.0)*sj2);
IkReal x576=(r02*sj1);
IkReal x577=(r00*sj0);
IkReal x578=((1.0)*cj2);
IkReal x579=(cj1*cj2);
IkReal x580=(cj0*r01*sj1);
IkReal x581=(cj0*cj1*r01);
CheckValue<IkReal> x582=IKPowWithIntegerCheck(cj3,-1);
if(!x582.valid){
continue;
}
if( IKabs(((x582.value)*(((((-1.0)*sj1*x575*x577))+(((-1.0)*x578*x581))+((sj2*x580))+((cj2*x576))+((x577*x579))+((cj1*r02*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x575*x577))+((sj2*x581))+((r02*x579))+(((-1.0)*x575*x576))+(((-1.0)*sj1*x577*x578))+((cj2*x580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x582.value)*(((((-1.0)*sj1*x575*x577))+(((-1.0)*x578*x581))+((sj2*x580))+((cj2*x576))+((x577*x579))+((cj1*r02*sj2))))))+IKsqr(((((-1.0)*cj1*x575*x577))+((sj2*x581))+((r02*x579))+(((-1.0)*x575*x576))+(((-1.0)*sj1*x577*x578))+((cj2*x580))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x582.value)*(((((-1.0)*sj1*x575*x577))+(((-1.0)*x578*x581))+((sj2*x580))+((cj2*x576))+((x577*x579))+((cj1*r02*sj2))))), ((((-1.0)*cj1*x575*x577))+((sj2*x581))+((r02*x579))+(((-1.0)*x575*x576))+(((-1.0)*sj1*x577*x578))+((cj2*x580))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x583=IKsin(j4);
IkReal x584=IKcos(j4);
IkReal x585=(cj0*r01);
IkReal x586=((1.0)*x584);
IkReal x587=((1.0)*r00*sj0);
IkReal x588=(cj3*x583);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x583))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj2*x588))+((sj1*x585))+((cj1*r02))+(((-1.0)*cj2*x586))+(((-1.0)*sj1*x587)));
evalcond[2]=((((-1.0)*sj2*x586))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x587))+((cj2*x588))+((cj1*x585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x589=((6140000.0)*px);
IkReal x590=(cj0*cj2);
IkReal x591=((2000000.0)*cj1);
IkReal x592=(cj0*py);
IkReal x593=(pz*sj1);
IkReal x594=(cj2*py*sj0);
CheckValue<IkReal> x595 = IKatan2WithCheck(IkReal(((((-11142.0)*cj2))+(((2000000.0)*px*x590))+(((-1.0)*cj1*sj0*x589))+(((-6140000.0)*x593))+(((6140000.0)*cj1*x592))+(((2000000.0)*x594))+(((-734958.0)*sj2)))),IkReal(((((76298.0)*cj2))+(((6140000.0)*x594))+((px*sj0*x591))+(((239400.0)*sj2))+(((2000000.0)*x593))+((x589*x590))+(((-1.0)*x591*x592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x595.valid){
continue;
}
CheckValue<IkReal> x596=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x596.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x595.value)+(((1.5707963267949)*(x596.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x597=IKsin(j3);
IkReal x598=IKcos(j3);
IkReal x599=(cj0*py);
IkReal x600=((0.005)*x598);
IkReal x601=((1.0)*px*sj0);
IkReal x602=((0.01535)*x597);
evalcond[0]=((-0.0107)+(((0.005)*x597))+(((-1.0)*py*sj0))+(((0.01535)*x598))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.12)+(((0.0053)*sj2))+(((-1.0)*sj1*x601))+(((-1.0)*sj2*x600))+((cj1*pz))+(((-0.1197)*cj2))+((sj1*x599))+((sj2*x602)));
evalcond[2]=((((-1.0)*cj2*x602))+(((-1.0)*cj1*x601))+((cj2*x600))+((cj1*x599))+(((-0.0053)*cj2))+(((-1.0)*pz*sj1))+(((-0.1197)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x603=((1.0)*sj2);
IkReal x604=(r02*sj1);
IkReal x605=(r00*sj0);
IkReal x606=((1.0)*cj2);
IkReal x607=(cj1*cj2);
IkReal x608=(cj0*r01*sj1);
IkReal x609=(cj0*cj1*r01);
if( IKabs((((x605*x607))+((cj2*x604))+(((-1.0)*sj1*x603*x605))+(((-1.0)*x606*x609))+((sj2*x608))+((cj1*r02*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x605*x606))+(((-1.0)*x603*x604))+((cj2*x608))+(((-1.0)*cj1*x603*x605))+((r02*x607))+((sj2*x609)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x605*x607))+((cj2*x604))+(((-1.0)*sj1*x603*x605))+(((-1.0)*x606*x609))+((sj2*x608))+((cj1*r02*sj2))))+IKsqr(((((-1.0)*sj1*x605*x606))+(((-1.0)*x603*x604))+((cj2*x608))+(((-1.0)*cj1*x603*x605))+((r02*x607))+((sj2*x609))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x605*x607))+((cj2*x604))+(((-1.0)*sj1*x603*x605))+(((-1.0)*x606*x609))+((sj2*x608))+((cj1*r02*sj2))), ((((-1.0)*sj1*x605*x606))+(((-1.0)*x603*x604))+((cj2*x608))+(((-1.0)*cj1*x603*x605))+((r02*x607))+((sj2*x609))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x610=IKsin(j4);
IkReal x611=IKcos(j4);
IkReal x612=((1.0)*sj2);
IkReal x613=(cj0*r01);
IkReal x614=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*x610*x612))+((sj1*x613))+(((-1.0)*sj1*x614))+(((-1.0)*cj2*x611))+((cj1*r02)));
evalcond[1]=(((cj2*x610))+(((-1.0)*x611*x612))+(((-1.0)*cj1*x614))+(((-1.0)*r02*sj1))+((cj1*x613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x615=((1.0)*sj2);
IkReal x616=(r02*sj1);
IkReal x617=((1.0)*cj2);
IkReal x618=(cj1*r02);
IkReal x619=(cj0*r01*sj1);
IkReal x620=(cj1*r00*sj0);
IkReal x621=(r00*sj0*sj1);
IkReal x622=(cj0*cj1*r01);
if( IKabs((((sj2*x621))+(((-1.0)*x617*x620))+(((-1.0)*x615*x619))+(((-1.0)*x615*x618))+(((-1.0)*x616*x617))+((cj2*x622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x618))+((cj2*x619))+((sj2*x622))+(((-1.0)*x617*x621))+(((-1.0)*x615*x616))+(((-1.0)*x615*x620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x621))+(((-1.0)*x617*x620))+(((-1.0)*x615*x619))+(((-1.0)*x615*x618))+(((-1.0)*x616*x617))+((cj2*x622))))+IKsqr((((cj2*x618))+((cj2*x619))+((sj2*x622))+(((-1.0)*x617*x621))+(((-1.0)*x615*x616))+(((-1.0)*x615*x620))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj2*x621))+(((-1.0)*x617*x620))+(((-1.0)*x615*x619))+(((-1.0)*x615*x618))+(((-1.0)*x616*x617))+((cj2*x622))), (((cj2*x618))+((cj2*x619))+((sj2*x622))+(((-1.0)*x617*x621))+(((-1.0)*x615*x616))+(((-1.0)*x615*x620))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x623=IKsin(j4);
IkReal x624=IKcos(j4);
IkReal x625=(cj0*r01);
IkReal x626=((1.0)*cj2);
IkReal x627=((1.0)*r00*sj0);
evalcond[0]=(((cj1*r02))+((sj2*x623))+(((-1.0)*x624*x626))+((sj1*x625))+(((-1.0)*sj1*x627)));
evalcond[1]=((((-1.0)*cj1*x627))+(((-1.0)*x623*x626))+(((-1.0)*r02*sj1))+(((-1.0)*sj2*x624))+((cj1*x625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), (((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x628=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*x628))+(IKsin(j4)));
evalcond[1]=(((cj0*cj1*r01))+(((-1.0)*cj1*sj0*x628))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x629=((1.0)*r00);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj1*r01))+(((-1.0)*cj1*sj0*x629))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x629))))+IKsqr((((cj0*cj1*r01))+(((-1.0)*cj1*sj0*x629))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x629))), (((cj0*cj1*r01))+(((-1.0)*cj1*sj0*x629))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x630=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x630)));
evalcond[1]=(((cj0*cj1*r01))+(((-1.0)*cj1*sj0*x630))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x631=(cj0*r01);
IkReal x632=((1.0)*r00*sj0);
if( IKabs((((cj1*r02))+((sj1*x631))+(((-1.0)*sj1*x632)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x632))+(((-1.0)*r02*sj1))+((cj1*x631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x631))+(((-1.0)*sj1*x632))))+IKsqr(((((-1.0)*cj1*x632))+(((-1.0)*r02*sj1))+((cj1*x631))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x631))+(((-1.0)*sj1*x632))), ((((-1.0)*cj1*x632))+(((-1.0)*r02*sj1))+((cj1*x631))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x633=(cj0*r01);
IkReal x634=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*(IKsin(j4))))+((cj1*r02))+((sj1*x633))+(((-1.0)*sj1*x634)));
evalcond[1]=((((-1.0)*cj1*x634))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4))))+((cj1*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x635=(r00*sj0);
IkReal x636=((1.0)*cj1);
IkReal x637=(cj0*r01);
IkReal x638=((1.0)*sj1);
if( IKabs(((((-1.0)*x637*x638))+(((-1.0)*r02*x636))+((sj1*x635)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x638))+(((-1.0)*x635*x636))+((cj1*x637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x637*x638))+(((-1.0)*r02*x636))+((sj1*x635))))+IKsqr(((((-1.0)*r02*x638))+(((-1.0)*x635*x636))+((cj1*x637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x637*x638))+(((-1.0)*r02*x636))+((sj1*x635))), ((((-1.0)*r02*x638))+(((-1.0)*x635*x636))+((cj1*x637))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x639=(cj0*r01);
IkReal x640=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*sj1*x640))+((cj1*r02))+(IKsin(j4))+((sj1*x639)));
evalcond[1]=((((-1.0)*cj1*x640))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4))))+((cj1*x639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x641=(cj0*r01);
IkReal x642=((1.0)*r00*sj0);
CheckValue<IkReal> x643=IKPowWithIntegerCheck(cj3,-1);
if(!x643.valid){
continue;
}
if( IKabs(((x643.value)*((((sj1*x641))+(((-1.0)*sj1*x642))+((cj1*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x642))+((cj1*x641))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x643.value)*((((sj1*x641))+(((-1.0)*sj1*x642))+((cj1*r02))))))+IKsqr(((((-1.0)*cj1*x642))+((cj1*x641))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x643.value)*((((sj1*x641))+(((-1.0)*sj1*x642))+((cj1*r02))))), ((((-1.0)*cj1*x642))+((cj1*x641))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x644=IKsin(j4);
IkReal x645=(cj0*r01);
IkReal x646=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x644)));
evalcond[1]=(((sj1*x645))+(((-1.0)*sj1*x646))+((cj1*r02))+(((-1.0)*cj3*x644)));
evalcond[2]=((((-1.0)*cj1*x646))+((cj1*x645))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x647=IKPowWithIntegerCheck(sj3,-1);
if(!x647.valid){
continue;
}
if( IKabs(((x647.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x647.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x647.value)*((((r01*sj0))+((cj0*r00))))), (((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x648=IKsin(j4);
IkReal x649=(cj0*r01);
IkReal x650=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x648)));
evalcond[1]=((((-1.0)*sj1*x650))+((sj1*x649))+((cj1*r02))+(((-1.0)*cj3*x648)));
evalcond[2]=((((-1.0)*cj1*x650))+((cj1*x649))+(((-1.0)*r02*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x651=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*x651)));
evalcond[1]=((((-1.0)*cj1*sj0*x651))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x652=((1.0)*cj0);
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*r00*x652)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*cj1*r01*x652))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*r00*x652))))+IKsqr((((r02*sj1))+(((-1.0)*cj1*r01*x652))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*r00*x652))), (((r02*sj1))+(((-1.0)*cj1*r01*x652))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x653=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x653)));
evalcond[1]=((((-1.0)*cj1*sj0*x653))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x654=(r00*sj0);
IkReal x655=((1.0)*cj1);
IkReal x656=(cj0*r01);
if( IKabs((((sj1*x654))+(((-1.0)*sj1*x656))+(((-1.0)*r02*x655)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x654))+(((-1.0)*x655*x656))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x654))+(((-1.0)*sj1*x656))+(((-1.0)*r02*x655))))+IKsqr((((cj1*x654))+(((-1.0)*x655*x656))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x654))+(((-1.0)*sj1*x656))+(((-1.0)*r02*x655))), (((cj1*x654))+(((-1.0)*x655*x656))+((r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x657=(cj0*r01);
IkReal x658=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*sj1*x658))+((sj1*x657))+((cj1*r02))+(IKsin(j4)));
evalcond[1]=((((-1.0)*cj1*x658))+((cj1*x657))+(((-1.0)*r02*sj1))+(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x659=(cj0*r01);
IkReal x660=(r00*sj0);
if( IKabs((((sj1*x659))+((cj1*r02))+(((-1.0)*sj1*x660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x659))+((r02*sj1))+((cj1*x660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x659))+((cj1*r02))+(((-1.0)*sj1*x660))))+IKsqr(((((-1.0)*cj1*x659))+((r02*sj1))+((cj1*x660))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj1*x659))+((cj1*r02))+(((-1.0)*sj1*x660))), ((((-1.0)*cj1*x659))+((r02*sj1))+((cj1*x660))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x661=(cj0*r01);
IkReal x662=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*cj1*x662))+(((-1.0)*r02*sj1))+(IKcos(j4))+((cj1*x661)));
evalcond[1]=((((-1.0)*(IKsin(j4))))+(((-1.0)*sj1*x662))+((sj1*x661))+((cj1*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x663=(r00*sj0);
IkReal x664=((1.0)*cj1);
IkReal x665=(cj0*r01);
CheckValue<IkReal> x666=IKPowWithIntegerCheck(cj3,-1);
if(!x666.valid){
continue;
}
if( IKabs(((x666.value)*((((sj1*x663))+(((-1.0)*sj1*x665))+(((-1.0)*r02*x664)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+((cj1*x663))+(((-1.0)*x664*x665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x666.value)*((((sj1*x663))+(((-1.0)*sj1*x665))+(((-1.0)*r02*x664))))))+IKsqr((((r02*sj1))+((cj1*x663))+(((-1.0)*x664*x665))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x666.value)*((((sj1*x663))+(((-1.0)*sj1*x665))+(((-1.0)*r02*x664))))), (((r02*sj1))+((cj1*x663))+(((-1.0)*x664*x665))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x667=IKsin(j4);
IkReal x668=(cj0*r01);
IkReal x669=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x667)));
evalcond[1]=((((-1.0)*cj1*x669))+(((-1.0)*r02*sj1))+(IKcos(j4))+((cj1*x668)));
evalcond[2]=((((-1.0)*sj1*x669))+((cj3*x667))+((sj1*x668))+((cj1*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x670=IKPowWithIntegerCheck(sj3,-1);
if(!x670.valid){
continue;
}
if( IKabs(((x670.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x670.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr(((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x670.value)*((((r01*sj0))+((cj0*r00))))), ((((-1.0)*cj0*cj1*r01))+((r02*sj1))+((cj1*r00*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x671=IKsin(j4);
IkReal x672=(cj0*r01);
IkReal x673=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x671))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*r02*sj1))+(IKcos(j4))+(((-1.0)*cj1*x673))+((cj1*x672)));
evalcond[2]=(((cj3*x671))+((cj1*r02))+(((-1.0)*sj1*x673))+((sj1*x672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x674=((1.0)*r00);
evalcond[0]=((((-1.0)*cj0*x674))+(((-1.0)*r01*sj0))+(IKsin(j4)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj0*sj1*x674))+((cj0*r01*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x675=((1.0)*r00);
if( IKabs(((((-1.0)*cj0*x675))+(((-1.0)*r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+(((-1.0)*sj0*sj1*x675))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x675))+(((-1.0)*r01*sj0))))+IKsqr((((cj1*r02))+(((-1.0)*sj0*sj1*x675))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*x675))+(((-1.0)*r01*sj0))), (((cj1*r02))+(((-1.0)*sj0*sj1*x675))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x676=((1.0)*r00);
evalcond[0]=((((-1.0)*cj0*x676))+(((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4)))));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj0*sj1*x676))+((cj0*r01*sj1))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x677=(cj0*r01);
IkReal x678=(r00*sj0);
if( IKabs((((r02*sj1))+(((-1.0)*cj1*x677))+((cj1*x678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x678))+((cj1*r02))+((sj1*x677)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj1))+(((-1.0)*cj1*x677))+((cj1*x678))))+IKsqr(((((-1.0)*sj1*x678))+((cj1*r02))+((sj1*x677))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r02*sj1))+(((-1.0)*cj1*x677))+((cj1*x678))), ((((-1.0)*sj1*x678))+((cj1*r02))+((sj1*x677))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x679=(cj0*r01);
IkReal x680=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*cj1*x680))+(IKsin(j4))+(((-1.0)*r02*sj1))+((cj1*x679)));
evalcond[1]=(((cj1*r02))+(((-1.0)*sj1*x680))+((sj1*x679))+(((-1.0)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x681=(cj0*r01);
IkReal x682=((1.0)*r00*sj0);
if( IKabs((((cj1*x681))+(((-1.0)*cj1*x682))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+(((-1.0)*sj1*x682))+((sj1*x681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x681))+(((-1.0)*cj1*x682))+(((-1.0)*r02*sj1))))+IKsqr((((cj1*r02))+(((-1.0)*sj1*x682))+((sj1*x681))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*x681))+(((-1.0)*cj1*x682))+(((-1.0)*r02*sj1))), (((cj1*r02))+(((-1.0)*sj1*x682))+((sj1*x681))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x683=(cj0*r01);
IkReal x684=((1.0)*r00*sj0);
evalcond[0]=(((cj1*r02))+(((-1.0)*sj1*x684))+((sj1*x683))+(((-1.0)*(IKcos(j4)))));
evalcond[1]=(((cj1*x683))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj1*x684))+(((-1.0)*r02*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x685=(cj0*r01);
IkReal x686=(r00*sj0);
CheckValue<IkReal> x687=IKPowWithIntegerCheck(cj3,-1);
if(!x687.valid){
continue;
}
if( IKabs(((x687.value)*((((cj1*x686))+((r02*sj1))+(((-1.0)*cj1*x685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x686))+((cj1*r02))+((sj1*x685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x687.value)*((((cj1*x686))+((r02*sj1))+(((-1.0)*cj1*x685))))))+IKsqr(((((-1.0)*sj1*x686))+((cj1*r02))+((sj1*x685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x687.value)*((((cj1*x686))+((r02*sj1))+(((-1.0)*cj1*x685))))), ((((-1.0)*sj1*x686))+((cj1*r02))+((sj1*x685))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x688=IKsin(j4);
IkReal x689=(cj0*r01);
IkReal x690=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+((sj3*x688))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj1*x690))+((cj1*r02))+((sj1*x689))+(((-1.0)*(IKcos(j4)))));
evalcond[2]=(((cj1*x689))+(((-1.0)*cj1*x690))+(((-1.0)*r02*sj1))+((cj3*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x691=IKPowWithIntegerCheck(sj3,-1);
if(!x691.valid){
continue;
}
if( IKabs(((x691.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x691.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x691.value)*((((r01*sj0))+((cj0*r00))))), ((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x692=IKsin(j4);
IkReal x693=(cj0*r01);
IkReal x694=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x692)));
evalcond[1]=((((-1.0)*sj1*x694))+((sj1*x693))+((cj1*r02))+(((-1.0)*(IKcos(j4)))));
evalcond[2]=(((cj1*x693))+(((-1.0)*cj1*x694))+(((-1.0)*r02*sj1))+((cj3*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), (((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x695=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*x695)));
evalcond[1]=((((-1.0)*sj0*sj1*x695))+((cj1*r02))+(IKcos(j4))+((cj0*r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x696=((1.0)*cj0);
if( IKabs(((((-1.0)*r00*x696))+(((-1.0)*r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*r01*sj1*x696))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x696))+(((-1.0)*r01*sj0))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*r01*sj1*x696))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x696))+(((-1.0)*r01*sj0))), (((r00*sj0*sj1))+(((-1.0)*r01*sj1*x696))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x697=((1.0)*r00);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*x697)));
evalcond[1]=((((-1.0)*sj0*sj1*x697))+((cj1*r02))+(IKcos(j4))+((cj0*r01*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x698=(r00*sj0);
IkReal x699=((1.0)*cj1);
IkReal x700=(cj0*r01);
IkReal x701=((1.0)*sj1);
if( IKabs(((((-1.0)*r02*x701))+(((-1.0)*x698*x699))+((cj1*x700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x698))+(((-1.0)*r02*x699))+(((-1.0)*x700*x701)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x701))+(((-1.0)*x698*x699))+((cj1*x700))))+IKsqr((((sj1*x698))+(((-1.0)*r02*x699))+(((-1.0)*x700*x701))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r02*x701))+(((-1.0)*x698*x699))+((cj1*x700))), (((sj1*x698))+(((-1.0)*r02*x699))+(((-1.0)*x700*x701))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x702=(cj0*r01);
IkReal x703=((1.0)*r00*sj0);
evalcond[0]=(((cj1*r02))+(IKcos(j4))+((sj1*x702))+(((-1.0)*sj1*x703)));
evalcond[1]=((((-1.0)*(IKsin(j4))))+(((-1.0)*cj1*x703))+(((-1.0)*r02*sj1))+((cj1*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x704=(r00*sj0);
IkReal x705=((1.0)*cj1);
IkReal x706=(cj0*r01);
if( IKabs((((r02*sj1))+(((-1.0)*x705*x706))+((cj1*x704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x706))+(((-1.0)*r02*x705))+((sj1*x704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj1))+(((-1.0)*x705*x706))+((cj1*x704))))+IKsqr(((((-1.0)*sj1*x706))+(((-1.0)*r02*x705))+((sj1*x704))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r02*sj1))+(((-1.0)*x705*x706))+((cj1*x704))), ((((-1.0)*sj1*x706))+(((-1.0)*r02*x705))+((sj1*x704))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x707=(cj0*r01);
IkReal x708=((1.0)*r00*sj0);
evalcond[0]=(((cj1*r02))+(IKcos(j4))+((sj1*x707))+(((-1.0)*sj1*x708)));
evalcond[1]=((((-1.0)*cj1*x708))+(IKsin(j4))+(((-1.0)*r02*sj1))+((cj1*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x709=(r00*sj0);
IkReal x710=((1.0)*cj1);
IkReal x711=(cj0*r01);
IkReal x712=((1.0)*sj1);
CheckValue<IkReal> x713=IKPowWithIntegerCheck(cj3,-1);
if(!x713.valid){
continue;
}
if( IKabs(((x713.value)*(((((-1.0)*r02*x712))+(((-1.0)*x709*x710))+((cj1*x711)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x710))+(((-1.0)*x711*x712))+((sj1*x709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x713.value)*(((((-1.0)*r02*x712))+(((-1.0)*x709*x710))+((cj1*x711))))))+IKsqr(((((-1.0)*r02*x710))+(((-1.0)*x711*x712))+((sj1*x709))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x713.value)*(((((-1.0)*r02*x712))+(((-1.0)*x709*x710))+((cj1*x711))))), ((((-1.0)*r02*x710))+(((-1.0)*x711*x712))+((sj1*x709))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x714=IKsin(j4);
IkReal x715=(cj0*r01);
IkReal x716=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x714)));
evalcond[1]=(((cj1*r02))+(IKcos(j4))+((sj1*x715))+(((-1.0)*sj1*x716)));
evalcond[2]=((((-1.0)*cj1*x716))+(((-1.0)*r02*sj1))+(((-1.0)*cj3*x714))+((cj1*x715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x717=IKPowWithIntegerCheck(sj3,-1);
if(!x717.valid){
continue;
}
if( IKabs(((x717.value)*((((r01*sj0))+((cj0*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x717.value)*((((r01*sj0))+((cj0*r00))))))+IKsqr((((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x717.value)*((((r01*sj0))+((cj0*r00))))), (((r00*sj0*sj1))+(((-1.0)*cj0*r01*sj1))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x718=IKsin(j4);
IkReal x719=(cj0*r01);
IkReal x720=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x718)));
evalcond[1]=(((cj1*r02))+(IKcos(j4))+(((-1.0)*sj1*x720))+((sj1*x719)));
evalcond[2]=((((-1.0)*r02*sj1))+(((-1.0)*cj1*x720))+(((-1.0)*cj3*x718))+((cj1*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x721=IKPowWithIntegerCheck(sj2,-1);
if(!x721.valid){
continue;
}
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x721.value)*((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((x721.value)*((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((x721.value)*((((cj0*cj1*r01))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*r00*sj0))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x722=IKcos(j4);
IkReal x723=(cj0*r01);
IkReal x724=((1.0)*x722);
IkReal x725=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*cj2*x724))+((cj1*r02))+(((-1.0)*sj1*x725))+((sj1*x723)));
evalcond[2]=(((cj1*x723))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x725))+(((-1.0)*sj2*x724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x726=IKPowWithIntegerCheck(cj2,-1);
if(!x726.valid){
continue;
}
if( IKabs((((r01*sj0))+((cj0*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x726.value)*(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj0))+((cj0*r00))))+IKsqr(((x726.value)*(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*sj0))+((cj0*r00))), ((x726.value)*(((((-1.0)*r00*sj0*sj1))+((cj1*r02))+((cj0*r01*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x727=IKcos(j4);
IkReal x728=(cj0*r01);
IkReal x729=((1.0)*x727);
IkReal x730=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(IKsin(j4))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*cj2*x729))+((cj1*r02))+(((-1.0)*sj1*x730))+((sj1*x728)));
evalcond[2]=(((cj1*x728))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x730))+(((-1.0)*sj2*x729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x731=((1.0)*r00);
CheckValue<IkReal> x732=IKPowWithIntegerCheck(sj2,-1);
if(!x732.valid){
continue;
}
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x732.value)*(((((-1.0)*cj1*sj0*x731))+((cj0*cj1*r01))+(((-1.0)*r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x731))))+IKsqr(((x732.value)*(((((-1.0)*cj1*sj0*x731))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x731))), ((x732.value)*(((((-1.0)*cj1*sj0*x731))+((cj0*cj1*r01))+(((-1.0)*r02*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x733=IKcos(j4);
IkReal x734=(cj0*r01);
IkReal x735=((1.0)*x733);
IkReal x736=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*r00)));
evalcond[1]=(((cj1*r02))+(((-1.0)*cj2*x735))+(((-1.0)*sj1*x736))+((sj1*x734)));
evalcond[2]=((((-1.0)*r02*sj1))+(((-1.0)*cj1*x736))+(((-1.0)*sj2*x735))+((cj1*x734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x737=((1.0)*r00);
CheckValue<IkReal> x738=IKPowWithIntegerCheck(cj2,-1);
if(!x738.valid){
continue;
}
if( IKabs(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x738.value)*((((cj1*r02))+(((-1.0)*sj0*sj1*x737))+((cj0*r01*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x737))))+IKsqr(((x738.value)*((((cj1*r02))+(((-1.0)*sj0*sj1*x737))+((cj0*r01*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0))+(((-1.0)*cj0*x737))), ((x738.value)*((((cj1*r02))+(((-1.0)*sj0*sj1*x737))+((cj0*r01*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x739=IKcos(j4);
IkReal x740=(cj0*r01);
IkReal x741=((1.0)*x739);
IkReal x742=((1.0)*r00*sj0);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*(IKsin(j4))))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj1*x742))+(((-1.0)*cj2*x741))+((cj1*r02))+((sj1*x740)));
evalcond[2]=(((cj1*x740))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x742))+(((-1.0)*sj2*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(sj3,-1);
if(!x748.valid){
continue;
}
IkReal x743=x748.value;
IkReal x744=(cj0*r00);
IkReal x745=(sj1*sj3);
IkReal x746=(r01*sj0);
IkReal x747=((1.0)*cj3*sj2);
CheckValue<IkReal> x749=IKPowWithIntegerCheck(cj2,-1);
if(!x749.valid){
continue;
}
if( IKabs((x743*((x746+x744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x743*(x749.value)*(((((-1.0)*x746*x747))+(((-1.0)*r00*sj0*x745))+(((-1.0)*x744*x747))+((cj0*r01*x745))+((cj1*r02*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x743*((x746+x744))))+IKsqr((x743*(x749.value)*(((((-1.0)*x746*x747))+(((-1.0)*r00*sj0*x745))+(((-1.0)*x744*x747))+((cj0*r01*x745))+((cj1*r02*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x743*((x746+x744))), (x743*(x749.value)*(((((-1.0)*x746*x747))+(((-1.0)*r00*sj0*x745))+(((-1.0)*x744*x747))+((cj0*r01*x745))+((cj1*r02*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x750=IKsin(j4);
IkReal x751=IKcos(j4);
IkReal x752=(cj0*r01);
IkReal x753=((1.0)*x751);
IkReal x754=((1.0)*r00*sj0);
IkReal x755=(cj3*x750);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x750)));
evalcond[1]=((((-1.0)*sj1*x754))+(((-1.0)*sj2*x755))+(((-1.0)*cj2*x753))+((cj1*r02))+((sj1*x752)));
evalcond[2]=(((cj1*x752))+(((-1.0)*sj2*x753))+((cj2*x755))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x761=IKPowWithIntegerCheck(sj3,-1);
if(!x761.valid){
continue;
}
IkReal x756=x761.value;
IkReal x757=(cj0*r00);
IkReal x758=((1.0)*sj3);
IkReal x759=(r01*sj0);
IkReal x760=(cj2*cj3);
CheckValue<IkReal> x762=IKPowWithIntegerCheck(sj2,-1);
if(!x762.valid){
continue;
}
if( IKabs((x756*((x757+x759)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x756*(x762.value)*((((x757*x760))+((x759*x760))+(((-1.0)*r02*sj1*x758))+((cj0*cj1*r01*sj3))+(((-1.0)*cj1*r00*sj0*x758)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x756*((x757+x759))))+IKsqr((x756*(x762.value)*((((x757*x760))+((x759*x760))+(((-1.0)*r02*sj1*x758))+((cj0*cj1*r01*sj3))+(((-1.0)*cj1*r00*sj0*x758))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x756*((x757+x759))), (x756*(x762.value)*((((x757*x760))+((x759*x760))+(((-1.0)*r02*sj1*x758))+((cj0*cj1*r01*sj3))+(((-1.0)*cj1*r00*sj0*x758))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x763=IKsin(j4);
IkReal x764=IKcos(j4);
IkReal x765=(cj0*r01);
IkReal x766=((1.0)*x764);
IkReal x767=((1.0)*r00*sj0);
IkReal x768=(cj3*x763);
evalcond[0]=(((sj3*x763))+(((-1.0)*r01*sj0))+(((-1.0)*cj0*r00)));
evalcond[1]=((((-1.0)*sj1*x767))+((sj1*x765))+(((-1.0)*sj2*x768))+((cj1*r02))+(((-1.0)*cj2*x766)));
evalcond[2]=(((cj2*x768))+((cj1*x765))+(((-1.0)*cj1*x767))+(((-1.0)*r02*sj1))+(((-1.0)*sj2*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x769=((1.0)*sj2);
IkReal x770=(r02*sj1);
IkReal x771=(r00*sj0);
IkReal x772=((1.0)*cj2);
IkReal x773=(cj1*cj2);
IkReal x774=(cj0*r01*sj1);
IkReal x775=(cj0*cj1*r01);
CheckValue<IkReal> x776=IKPowWithIntegerCheck(cj3,-1);
if(!x776.valid){
continue;
}
if( IKabs(((x776.value)*((((x771*x773))+((cj2*x770))+(((-1.0)*sj1*x769*x771))+((sj2*x774))+(((-1.0)*x772*x775))+((cj1*r02*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x769*x771))+((cj2*x774))+(((-1.0)*sj1*x771*x772))+(((-1.0)*x769*x770))+((sj2*x775))+((r02*x773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x776.value)*((((x771*x773))+((cj2*x770))+(((-1.0)*sj1*x769*x771))+((sj2*x774))+(((-1.0)*x772*x775))+((cj1*r02*sj2))))))+IKsqr(((((-1.0)*cj1*x769*x771))+((cj2*x774))+(((-1.0)*sj1*x771*x772))+(((-1.0)*x769*x770))+((sj2*x775))+((r02*x773))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x776.value)*((((x771*x773))+((cj2*x770))+(((-1.0)*sj1*x769*x771))+((sj2*x774))+(((-1.0)*x772*x775))+((cj1*r02*sj2))))), ((((-1.0)*cj1*x769*x771))+((cj2*x774))+(((-1.0)*sj1*x771*x772))+(((-1.0)*x769*x770))+((sj2*x775))+((r02*x773))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x777=IKsin(j4);
IkReal x778=IKcos(j4);
IkReal x779=(cj0*r01);
IkReal x780=((1.0)*x778);
IkReal x781=((1.0)*r00*sj0);
IkReal x782=(cj3*x777);
evalcond[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00))+((sj3*x777)));
evalcond[1]=((((-1.0)*sj2*x782))+(((-1.0)*cj2*x780))+((cj1*r02))+((sj1*x779))+(((-1.0)*sj1*x781)));
evalcond[2]=(((cj1*x779))+(((-1.0)*r02*sj1))+(((-1.0)*cj1*x781))+(((-1.0)*sj2*x780))+((cj2*x782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ba6b42e857d8c0f917a822c60243eabf"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
